% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vif_filter.R
\name{vif_filter}
\alias{vif_filter}
\title{Filter SpatRaster Layers based on Variance Inflation Factor (VIF)}
\usage{
vif_filter(x, th = 5)
}
\arguments{
\item{x}{A \code{SpatRaster} object containing the layers (variables) to filter.
Must contain two or more layers.}

\item{th}{A numeric value specifying the Variance Inflation Factor (VIF)
threshold. Layers whose VIF exceeds this threshold are candidates for
removal in each iteration (default: 10).}
}
\value{
A \link{SpatRaster} object containing onlythe layers from the input
\code{x} that were retained by the VIF filtering process. The layers are returned
in their original order. If no layers meet the VIF threshold criterion
(all are excluded) or if the input becomes empty after removing NA values, an empty \code{SpatRaster} object is returned.
}
\description{
This function iteratively filters layers from a \code{SpatRaster} object by removing the one with the highest Variance Inflation Factor (VIF) that exceeds a specified threshold (\code{th}).
}
\details{
This function implements a common iterative procedure to reduce multicollinearity among raster layers by removing variables with high Variance Inflation Factor (VIF).
The VIF for a specific predictor indicates how much the variance of its estimated coefficient is inflated due to its linear relationships with all other predictors in the model.
Conceptually, it is based on the proportion of variance that predictor shares with the other independent variables.
A high VIF value suggests a high degree of collinearity with other predictors (values exceeding \code{5} or \code{10} are often considered problematic; see O'Brien, 2007).
In this context, the function provides the Pearson correlation matrix between all initial variables, and a threshold parameter (\code{th}) is available to specify the critical VIF value for addressing multicollinearity.

Here are the key steps:
\enumerate{
\item Convert the input \code{SpatRaster} (\code{x}) to a \code{data.frame}.
\item Remove rows containing any \code{NA} values across all variables from the \code{data.frame}.
\item In each iteration, calculate the Variance Inflation Factor (VIF) for all variables currently remaining in the dataset.
\item Identify the variable with the highest VIF among the remaining variables.
\item If this highest VIF value is greater than the specified threshold (\code{th}), remove the variable with the highest VIF from the dataset, and the loop continues with the remaining variables.
\item This iterative process (steps 3-5) repeats until the highest VIF among the remaining variables is less than or equal to \code{th}, or until only one variable remains in the dataset.
}

Finally, the function returns a new \code{SpatRaster} object containing only the variables that were kept.
It also prints a summary including:
\itemize{
\item The original Pearson's correlation matrix between all initial variables.
\item The lists of variables that were kept and those that were excluded.
\item The final VIF values for the variables that were retained after the filtering process.
}

The internal VIF calculation includes checks to handle potential numerical
instability, such as columns with zero or near-zero variance and cases of
perfect collinearity among variables, which could otherwise lead to errors
(e.g., infinite VIFs or issues with matrix inversion). Variables identified
as having infinite VIF due to perfect collinearity are prioritized for removal.

References:
O’brien, R.M. A Caution Regarding Rules of Thumb for Variance Inflation Factors. Qual Quant 41, 673–690 (2007). https://doi.org/10.1007/s11135-006-9018-6
}
\examples{
\dontrun{
library(terra)
library(sf)

set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
  (rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
  (rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
  (colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
  (colFromCell(r_clim_present, 1:n_cells) +
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) /
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))
)
names(r_clim) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim) <- "EPSG:4326"
terra::plot(r_clim)
r_clim_filtered <- vif_filter(r_clim, th = 5)
terra::plot(r_clim_filtered)

}
}
