% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vif_filter.R
\name{vif_filter}
\alias{vif_filter}
\title{Filter SpatRaster Layers based on Variance Inflation Factor (VIF)}
\usage{
vif_filter(x, th = 10)
}
\arguments{
\item{x}{A \code{SpatRaster} object containing the layers (variables) to filter.
Must contain two or more layers for VIF calculation to be possible.}

\item{th}{A numeric value specifying the Variance Inflation Factor (VIF)
threshold. Layers whose VIF exceeds this threshold are candidates for
removal in each iteration (default: 10).}
}
\value{
\item{A \link{SpatRaster} object}{A \link{SpatRaster} object containing only
the layers from the input \code{x} that were retained by the VIF filtering
process. The layers are returned in their original order. If no layers meet
the VIF threshold criterion (all are excluded) or if the input becomes empty
after removing NA values, an empty \code{SpatRaster} object is returned.}
}
\description{
This function iteratively filters layers from a \code{SpatRaster} object by removing the one with the highest Variance Inflation Factor (VIF) that exceeds a specified threshold (\code{th}). The process continues until all remaining layers have a VIF below the threshold or until only one layer
remains. VIF calculation is performed on the raster data after converting it
to a \code{data.frame} and removing rows containing \code{NA} values in any column.
}
\details{
The Variance Inflation Factor (VIF) quantifies the severity of
multicollinearity among predictor variables in a linear regression model. A
high VIF for a variable indicates that this variable is highly correlated
with other predictors. In the context of environmental variable selection for
multivariate analyses (such as Mahalanobis distance), high VIF values suggest
redundancy of information among variables.

This function implements a common iterative procedure to reduce
multicollinearity:
\enumerate{
\item The input \code{SpatRaster} (\code{x}) is converted to a \code{data.frame}.
\item Rows containing any \code{NA} values across all variables are removed from the \code{data.frame}. All subsequent VIF calculations are based on this cleaned dataset.
\item The VIF is calculated for each variable currently in the dataset.
\item If the highest VIF calculated in the current step is greater than the threshold \code{th}, the variable corresponding to this highest VIF is removed from the dataset.
\item Steps 3 and 4 are repeated until the highest VIF among the remaining variables is less than or equal to \code{th}, or until only one variable remains in the dataset.
}

During the process, the function prints messages to the console indicating
which variables are being evaluated and which, if any, are removed in each
iteration.

The internal VIF calculation includes checks to handle potential numerical
instability, such as columns with zero or near-zero variance and cases of
perfect collinearity, which could otherwise lead to errors (e.g., infinite
VIFs or issues with matrix inversion). Variables with infinite VIF are
prioritized for removal.
}
\examples{
\dontrun{
library(terra)
library(sf)

set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
  (rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
  (rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
  (colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
  (colFromCell(r_clim_present, 1:n_cells) +
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) /
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))
)
names(r_clim) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim) <- "EPSG:4326"
terra::plot(r_clim)
r_clim_filtered <- vif_filter(r_clim, th = 5)
terra::plot(r_clim_filtered)
}
}
