mh_rep_ch <- function(polygon,
col_name,
present_climate_variables,
future_climate_variables,
study_area,
th = 0.95,
model,
year,
dir_output = file.path(tempdir(), "ClimaRep"),
save_raw = FALSE) {
old_warn <- getOption("warn")
options(warn = -1)
on.exit(options(warn = old_warn))
# Input validation (keep this)
if (!inherits(polygon, "sf"))
stop("Parameter 'polygon' must be an sf object.")
if (!is.character(col_name) ||
length(col_name) != 1 || !(col_name %in% names(polygon))) {
stop("Parameter 'col_name' must be a single character string naming a column in 'polygon'.")
}
if (!inherits(present_climate_variables, "SpatRaster"))
stop("Parameter 'present_climate_variables' must be a SpatRaster object.")
if (!inherits(future_climate_variables, "SpatRaster"))
stop("Parameter 'future_climate_variables' must be a SpatRaster object.")
if (!inherits(study_area, "sf"))
stop("Parameter 'study_area' must be an sf object.")
if (!is.numeric(th) || length(th) != 1 || th < 0 || th > 1) {
stop("Parameter 'th' must be a single numeric value between 0 and 1.")
}
if (!is.character(model) || length(model) != 1) {
stop("Parameter 'model' must be a single character string.")
}
if (!is.character(year) || length(year) != 1) {
stop("Parameter 'year' must be a single character string.")
}
if (!is.character(dir_output) || length(dir_output) != 1) {
stop("Parameter 'dir_output' must be a single character string.")
}
if (terra::nlyr(present_climate_variables) < 2) {
warning(
"climate_variables has fewer than 2 layers. Mahalanobis distance is typically for multiple variables. Proceeding with single variable analysis if applicable."
)
}
dir_present <- file.path(dir_output, "Mh_Raw_Pre")
dir_future <- file.path(dir_output, "Mh_Raw_Fut")
dir_change <- file.path(dir_output, "Change")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_present, dir_future, dir_charts, dir_change)
if (save_raw) {
dirs_to_create <- c(dir_present, dir_future, dir_change, dir_charts)
} else {
dirs_to_create <- c(dir_change, dir_charts)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
# ++++++++++ THIS BLOCK IS REMOVED/COMMENTED OUT ++++++++++
# message("Validating and adjusting Coordinate Reference Systems (CRS)...")
# reference_system_check <- terra::crs(present_climate_variables, describe = TRUE)$code
# reference_system <- terra::crs(present_climate_variables)
# if (terra::crs(future_climate_variables, describe = TRUE)$code != reference_system_check) {
#   message("Adjusting CRS of future_climate_variables to match reference system.")
#   future_climate_variables <- terra::project(future_climate_variables, reference_system)
# }
# if (sf::st_crs(polygon)$epsg != reference_system_check) {
#   message("Adjusting CRS of polygon to match reference system.")
#   polygon <- sf::st_transform(polygon, reference_system)
# }
# if (sf::st_crs(study_area)$epsg != reference_system_check) {
#   message("Adjusting CRS of study_area to match reference system.")
#   study_area <- sf::st_transform(study_area, reference_system)
# }
# ++++++++++ END OF REMOVED BLOCK ++++++++++
message("Starting process")
# At this point, present_climate_variables, future_climate_variables,
# polygon, and study_area are *assumed* to be already aligned and projected
# to the same CRS, as handled in the main script before calling this function.
data_p <- na.omit(terra::as.data.frame(present_climate_variables, xy = TRUE))
data_f <- na.omit(terra::as.data.frame(future_climate_variables, xy = TRUE))
data_p$Period <- "Present"
data_f$Period <- "Future"
data_p_f <- rbind(data_p, data_f) # This is where the error was likely originating
cov_matrix <- cov(data_p_f[, 3:(ncol(data_p_f) - 1)], use = "complete.obs")
for (j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ",
pol_name,
" (",
j,
" of ",
nrow(polygon),
")")
# The issue might also be here if 'pol' is used to crop 'present_climate_variables'
# without explicitly ensuring its extent aligns perfectly with the raster's grid.
# However, if the data frames are aligned, this should work.
raster_polygon <- terra::mask(terra::crop(present_climate_variables, pol), pol)
if (all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climate_data <- as.matrix(data[, 3:(ncol(data) - 1)])
mh_values <- mahalanobis(climate_data, mu, cov_matrix)
# Ensure the output raster from calculate_mh aligns with the main raster grids
# This is critical. It must take the template grid's properties.
# Create a SpatRaster from coordinates and values,
# then resample it to the *exact* grid of present_climate_variables.
temp_rast <- terra::rast(cbind(coords, mh_values),
type = "xyz",
crs = terra::crs(present_climate_variables)) # Use the CRS of the already aligned input
# Crucially, resample this temporary raster to the exact grid of the input rasters
# to prevent any new alignment issues from `terra::rast(xyz)`.
terra::resample(temp_rast, present_climate_variables, method = "near") # Use 'near' for distance values
}
mh_present <- calculate_mh(data_p)
mh_future <- calculate_mh(data_f)
if (save_raw) {
terra::writeRaster(
mh_present,
paste0(dir_present, "/MahalanobisRaw_", pol_name, ".tif"),
overwrite = TRUE
)
terra::writeRaster(
mh_future,
paste0(
dir_future,
"/MahalanobisRaw_post_",
model,
"_",
year,
"_",
pol_name,
".tif"
),
overwrite = TRUE
)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly),
probs = th,
na.rm = TRUE)
if (anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
th_future <- classify_mh(mh_future, th_value)
# These operations (change, solo_presente, solo_futura, raster_final)
# also require perfectly aligned rasters.
change <- th_present * th_future
solo_presente <- th_present - change
solo_futura <- th_future - change
raster_final <- change + (solo_presente * 2) + (solo_futura * 3)
terra::writeRaster(raster_final,
file.path(
dir_output,
"change",
paste0("TH_change_", model, "_", year, "_", pol_name, ".tif")
),
overwrite = TRUE)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(
ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(
data = study_area,
color = "gray50",
fill = NA,
linewidth = 1
) +
ggplot2::geom_sf(
data = pol,
color = "black",
fill = NA
) +
ggplot2::scale_fill_manual(
name = " ",
values = c(
"0" = "grey90",
"1" = "aquamarine4",
"2" = "coral1",
"3" = "aquamarine2"
),
labels = c(
"0" = "Non-represented",
"1" = "Retained",
"2" = "Lost",
"3" = "Novel"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal()
)
ggplot2::ggsave(
filename = file.path(
dir_output,
"Charts",
paste0(pol_name, "_rep_change.jpeg")
),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("All processes were completed")
cat(paste("Output files in: ", dir_output))
return(invisible(NULL))
}
