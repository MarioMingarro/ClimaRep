dir_present_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/TEST_SIMPLE/P/"
dir_future_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/TEST_SIMPLE/F/"
dir_result <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/TEST_SIMPLE/"
#OLD/TEST_PNAC/"
#Peninsula_Iberica_89.shp"
#national_parks.shp"
polygon <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/TEST_SIMPLE/AES.shp")
source("Dependencies/Fun.R")
library(sf)
library(terra)
#OLD/TEST_PNAC/"
#Peninsula_Iberica_89.shp"
#national_parks.shp"
polygon <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/TEST_SIMPLE/AES.shp")
polygon$Id
View(polygon)
#'   s <- rast(list(r, 2*r + 0.1, r + 0.5, -r))
#'   names(s) <- c("layer1", "layer2", "layer3", "layer4")
#'   result_raster <- vif_filter(s, th = 5)
#'   print(result_raster)
#' }
#'
#' @importFrom terra as.data.frame
#' @importFrom stats as.formula lm summary cor
#'
#' @export
vif_filter <- function(x, th = 10) {
calc_vif <- function(df) {
if (ncol(df) == 0) {
return(numeric(0))
}
vif_values <- sapply(1:ncol(df), function(i) {
formula <- as.formula(paste(names(df)[i], "~ ."))
model <- lm(formula, data = df)
return(1 / (1 - summary(model)$r.squared))
})
names(vif_values) <- colnames(df)
return(vif_values)
}
if (inherits(x, 'SpatRaster')) {
x <- terra::as.data.frame(x, na.rm = TRUE)
}
exc <- character(0)
while (ncol(x) > 0) {
v <- calc_vif(x)
if (length(v) == 0 || max(v) < th) break
ex <- names(v)[which.max(v)]
exc <- c(exc, ex)
x <- x[, !(colnames(x) %in% ex), drop = FALSE]
}
result <- list(
variables = colnames(x),
excluded = exc,
corMatrix = if (ncol(x) > 1) cor(x, method = "pearson") else NULL,
results = data.frame(Variables = names(v), VIF = v)
)
print(result)
return(result)
}
dir_present <- paste0(dir_result, "Present/")
dir_fut <- paste0(dir_result, "Future/")
dir_future <- paste0(dir_fut, "TEST/")
dir_charts <- paste0(dir_result, "Charts/")
# CLIMATE ----
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
future_climatic_variables <- terra::rast(list.files(dir_future_climate_data, "\\.tif$", full.names = T))
names(future_climatic_variables) <- names(present_climatic_variables)
terra::crs(present_climatic_variables)
reference_system <-"EPSG:4326"
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
dir_present_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/CLIMA/FUTURE/GFDL/"
dir_result <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/"
study_area <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/MURCIA.shp")
polygon <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/WDPA_MURCIA_89N.shp")
#'   s <- rast(list(r, 2*r + 0.1, r + 0.5, -r))
#'   names(s) <- c("layer1", "layer2", "layer3", "layer4")
#'   result_raster <- vif_filter(s, th = 5)
#'   print(result_raster)
#' }
#'
#' @importFrom terra as.data.frame
#' @importFrom stats as.formula lm summary cor
#'
#' @export
vif_filter <- function(x, th = 10) {
calc_vif <- function(df) {
if (ncol(df) == 0) {
return(numeric(0))
}
vif_values <- sapply(1:ncol(df), function(i) {
formula <- as.formula(paste(names(df)[i], "~ ."))
model <- lm(formula, data = df)
return(1 / (1 - summary(model)$r.squared))
})
names(vif_values) <- colnames(df)
return(vif_values)
}
if (inherits(x, 'SpatRaster')) {
x <- terra::as.data.frame(x, na.rm = TRUE)
}
exc <- character(0)
while (ncol(x) > 0) {
v <- calc_vif(x)
if (length(v) == 0 || max(v) < th) break
ex <- names(v)[which.max(v)]
exc <- c(exc, ex)
x <- x[, !(colnames(x) %in% ex), drop = FALSE]
}
result <- list(
variables = colnames(x),
excluded = exc,
corMatrix = if (ncol(x) > 1) cor(x, method = "pearson") else NULL,
results = data.frame(Variables = names(v), VIF = v)
)
print(result)
return(result)
}
dir_present <- paste0(dir_result, "Present/")
dir_fut <- paste0(dir_result, "Future/")
dir_futu <- paste0(dir_fut, year,"/")
polygon$NAME
names <- polygon$NAME
# CLIMATE ----
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
present_climatic_variables
plot(present_climatic_variables)
# Reference system ----
terra::crs(present_climatic_variables)
reference_system <-"EPSG:4326"
study_area <- st_transform(study_area, crs(reference_system))
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon <- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
plot(study_area$geometry)
plot(polygon$geometry, add = T, col = "red")
# Crop raster to study area
present_climatic_variables <-  terra::mask (crop(present_climatic_variables, study_area), study_area)
plot(present_climatic_variables)
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
vif_r <- vif_filter(present_climatic_variables, th = 10)
vif_filter <- function(x, th = 10) {
# Función interna optimizada para calcular VIF
calc_vif <- function(df) {
n <- ncol(df)
if (n == 0) return(numeric(0))
vif_values <- numeric(n)
names(vif_values) <- colnames(df)
# Precalcular la matriz de diseño para todas las variables
X <- as.matrix(cbind(1, df))  # Añadir intercepto
for (i in seq_len(n)) {
# Usar álgebra matricial en lugar de lm() para mayor eficiencia
Xi <- X[, -c(1, i + 1), drop = FALSE]  # +1 porque añadimos intercepto
y <- X[, i + 1, drop = FALSE]
# Calcular R² directamente
beta <- solve(crossprod(Xi), crossprod(Xi, y))
y_hat <- Xi %*% beta
ss_tot <- sum((y - mean(y))^2)
ss_res <- sum((y - y_hat)^2)vif_filter <- function(x, th = 10) {
vif_filter <- function(x, th = 10) {
# Función interna optimizada para calcular VIF
calc_vif <- function(df) {
n <- ncol(df)
if (n == 0) return(numeric(0))
vif_values <- numeric(n)
names(vif_values) <- colnames(df)
# Precalcular la matriz de diseño para todas las variables
X <- as.matrix(cbind(1, df))  # Añadir intercepto
for (i in seq_len(n)) {
# Usar álgebra matricial en lugar de lm() para mayor eficiencia
Xi <- X[, -c(1, i + 1), drop = FALSE]  # +1 porque añadimos intercepto
y <- X[, i + 1, drop = FALSE]
# Calcular R² directamente
beta <- solve(crossprod(Xi), crossprod(Xi, y))
y_hat <- Xi %*% beta
ss_tot <- sum((y - mean(y))^2)
ss_res <- sum((y - y_hat)^2)
r_squared <- if (ss_tot > 0) 1 - (ss_res / ss_tot) else 0
vif_values[i] <- 1 / (1 - r_squared)
}
return(vif_values)
}
# Convertir SpatRaster a data.frame si es necesario
if (inherits(x, 'SpatRaster')) {
x <- terra::as.data.frame(x, na.rm = TRUE)
}
# Vector inicial para variables excluidas (pre-asignar tamaño podría ayudar)
exc <- character(0)
original_vars <- colnames(x)
# Pre-calcular matriz de correlación una sola vez al final
while (ncol(x) > 0) {
v <- calc_vif(x)
if (length(v) == 0 || max(v) < th) break
# Encontrar todas las variables con VIF > th en cada iteración
high_vif <- which(v >= th)
if (length(high_vif) == 0) break
# Eliminar la variable con mayor VIF
ex <- names(v)[which.max(v)]
exc <- c(exc, ex)
x <- x[, !(colnames(x) %in% ex), drop = FALSE]
}
# Construir resultado
result <- list(
variables = colnames(x),
excluded = exc,
corMatrix = if (ncol(x) > 1) cor(x, method = "pearson") else NULL,
results = if (exists("v")) data.frame(Variables = names(v), VIF = v) else NULL
)
# Opcional: imprimir resumen en lugar de todo el objeto
cat("Variables incluidas:", paste(result$variables, collapse = ", "), "\n")
cat("Variables excluidas:", paste(result$excluded, collapse = ", "), "\n")
return(invisible(result))
}
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
vif_filter <- function(x, th = 10) {
# Función para calcular el VIF de todas las variables
calc_vif <- function(df) {
vif_values <- sapply(1:ncol(df), function(i) {
formula <- as.formula(paste(names(df)[i], "~ ."))  # Formula de lm con todas las demás variables
model <- lm(formula, data = df)
return(1 / (1 - summary(model)$r.squared))
})
names(vif_values) <- colnames(df)
return(vif_values)
}
# Convertir el objeto Raster a un data frame
x <- as.data.frame(x, na.rm = TRUE)
# Eliminar variables multicolineales iterativamente
exc <- character(0)  # Lista de variables excluidas
while (TRUE) {
v <- calc_vif(x)  # Calcular el VIF
if (max(v) < th) break  # Terminar si no hay VIF por encima del umbral
ex <- names(v)[which.max(v)]  # Variable con mayor VIF
exc <- c(exc, ex)  # Agregar a la lista de excluidos
x <- x[, !(colnames(x) %in% ex)]  # Remover variable
}
# Crear lista de resultados
result <- list(
variables = colnames(x),
excluded = exc,
corMatrix = cor(x, method = "pearson"),
results = data.frame(Variables = names(v), VIF = v)
)
print(result)
return(result)
}
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
dir_present_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/CLIMA/FUTURE/GFDL/"
dir_result <- "C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/"
study_area <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/MURCIA.shp")
polygon <- read_sf("C:/A_TRABAJO/A_GABRIEL/REPRESENTATIVIDAD/MURCIA/WDPA_MURCIA_89N.shp")
# Create name object
year <- "2070"
model <- "GFDL"
names <- polygon$NAME
# Crear las subcarpetas 'presente' y 'futuro' dentro de 'dir_result'
dir_present <- paste0(dir_result, "Present/")
dir_fut <- paste0(dir_result, "Future/")
dir_futu <- paste0(dir_fut, year,"/")
dir_future <- paste0(dir_futu, model,"/")
dir_charts <- paste0(dir_result, "Charts/")
# Crear las carpetas si no existen
if (!dir.exists(dir_result)) {
dir.create(dir_result)
}
if (!dir.exists(dir_present)) {
dir.create(dir_present)
}
if (!dir.exists(dir_fut)) {
dir.create(dir_fut)
}
if (!dir.exists(dir_futu)) {
dir.create(dir_futu)
}
if (!dir.exists(dir_future)) {
dir.create(dir_future)
}
if (!dir.exists(dir_charts)) {
dir.create(dir_charts)
}
# CLIMATE ----
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
# Crear un vector con los nombres de las variables a excluir
exclude_vars <- c("bio8", "bio9", "bio18", "bio19")
# Crear un patrón de expresión regular para excluir estas variables
exclude_pattern <- paste0("bio(", paste(gsub("bio", "", exclude_vars), collapse = "|"), ")")
# Seleccionar las variables deseadas
present_climatic_variables <- subset(present_climatic_variables, grep(exclude_pattern, names(present_climatic_variables), invert = TRUE, value = TRUE))
names(present_climatic_variables) <- c("CHELSA_bio1","CHELSA_bio10","CHELSA_bio11","CHELSA_bio12","CHELSA_bio13","CHELSA_bio14",
"CHELSA_bio15","CHELSA_bio16","CHELSA_bio17","CHELSA_bio2",
"CHELSA_bio3","CHELSA_bio4","CHELSA_bio5","CHELSA_bio6","CHELSA_bio7")
names(future_climatic_variables) <- names(present_climatic_variables)
terra::crs(present_climatic_variables)
reference_system <-"EPSG:4326"
study_area <- st_transform(study_area, crs(reference_system))
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon <- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
# Crop raster to study area
present_climatic_variables <-  terra::mask (crop(present_climatic_variables, study_area), study_area)
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
#'   s <- rast(list(r, 2*r + 0.1, r + 0.5, -r))
#'   names(s) <- c("layer1", "layer2", "layer3", "layer4")
#'   result_raster <- vif_filter(s, th = 5)
#'   print(result_raster)
#' }
#'
#' @importFrom terra as.data.frame
#' @importFrom stats as.formula lm summary cor
#'
#' @export
vif_filter <- function(x, th = 10) {
calc_vif <- function(df) {
if (ncol(df) == 0) {
return(numeric(0))
}
vif_values <- sapply(1:ncol(df), function(i) {
formula <- as.formula(paste(names(df)[i], "~ ."))
model <- lm(formula, data = df)
return(1 / (1 - summary(model)$r.squared))
})
names(vif_values) <- colnames(df)
return(vif_values)
}
if (inherits(x, 'SpatRaster')) {
x <- terra::as.data.frame(x, na.rm = TRUE)
}
exc <- character(0)
while (ncol(x) > 0) {
v <- calc_vif(x)
if (length(v) == 0 || max(v) < th) break
ex <- names(v)[which.max(v)]
exc <- c(exc, ex)
x <- x[, !(colnames(x) %in% ex), drop = FALSE]
}
result <- list(
variables = colnames(x),
excluded = exc,
corMatrix = if (ncol(x) > 1) cor(x, method = "pearson") else NULL,
results = data.frame(Variables = names(v), VIF = v)
)
print(result)
return(result)
}
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
#'   s <- rast(list(r, 2*r + 0.1, r + 0.5, -r))
#'   names(s) <- c("layer1", "layer2", "layer3", "layer4")
#'   result_raster <- vif_filter(s, th = 5)
#'   print(result_raster)
#' }
#'
#' @importFrom terra as.data.frame
#' @importFrom stats as.formula lm summary cor
#'
#' @export
vif_filter <- function(x, th = 10) {
calc_vif <- function(df) {
if (ncol(df) == 0) {
return(numeric(0))
}
vif_values <- sapply(1:ncol(df), function(i) {
formula <- as.formula(paste(names(df)[i], "~ ."))
model <- lm(formula, data = df)
return(1 / (1 - summary(model)$r.squared))
})
names(vif_values) <- colnames(df)
return(vif_values)
}
if (inherits(x, 'SpatRaster')) {
x <- terra::as.data.frame(x, na.rm = TRUE)
}
exc <- character(0)
while (ncol(x) > 0) {
v <- calc_vif(x)
if (length(v) == 0 || max(v) < th) break
ex <- names(v)[which.max(v)]
exc <- c(exc, ex)
x <- x[, !(colnames(x) %in% ex), drop = FALSE]
}
result <- list(
variables = colnames(x),
excluded = exc,
cormatrix = if (ncol(x) > 1) cor(x, method = "pearson") else NULL,
results = data.frame(Variables = names(v), VIF = v)
)
print(result)
return(result)
}
# VIF
vif_r <- vif_filter(present_climatic_variables, th = 10)
