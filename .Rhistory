dir_shared <- file.path(dir_output, "Shared")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_present, dir_future, dir_charts, dir_shared)
if (save_raster) {
dirs_to_create <- c(dir_present, dir_future, dir_shared, dir_charts)
} else {
dirs_to_create <- c(dir_shared, dir_charts)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
reference_system_check <- terra::crs(present_climatic_variables, describe = TRUE)$code
reference_system <- terra::crs(present_climatic_variables)
if (terra::crs(future_climatic_variables, describe = TRUE)$code != reference_system_check) {
message("Adjusting CRS of future_climatic_variables to match reference system.")
future_climatic_variables <- terra::project(future_climatic_variables, reference_system)
}
if (sf::st_crs(polygon)$epsg != reference_system_check) {
message("Adjusting CRS of polygon to match reference system.")
polygon <- sf::st_transform(polygon, reference_system)
}
if (sf::st_crs(study_area)$epsg != reference_system_check) {
message("Adjusting CRS of study_area to match reference system.")
study_area <- sf::st_transform(study_area, reference_system)
}
message("Starting process")
data_p <- na.omit(terra::as.data.frame(present_climatic_variables, xy = TRUE))
data_p$Period <- "Present"
data_f <- na.omit(terra::as.data.frame(future_climatic_variables, xy = TRUE))
data_f$Period <- "Future"
data_p_f <- rbind(data_p, data_f)
cov_matrix <- cov(data_p_f[, 3:(ncol(data_p_f)-1)], use = "complete.obs")
for(j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ", pol_name, " (", j, " of ", nrow(polygon), ")")
raster_polygon <- terra::mask(terra::crop(present_climatic_variables, pol), pol)
if(all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climatic_data <- as.matrix(data[, 3:(ncol(data)-1)])
mh_values <- mahalanobis(climatic_data, mu, cov_matrix)
terra::rast(cbind(coords, mh_values), type = "xyz", crs = reference_system)
}
mh_present <- calculate_mh(data_p)
mh_future <- calculate_mh(data_f)
if(save_raster) {
terra::writeRaster(mh_present,
paste0(dir_present, "/MH_PRESENT_", pol_name, ".tif"),
overwrite = TRUE)
terra::writeRaster(mh_future,
paste0(dir_future, "/MH_FUTURE_", model, "_", year, "_", pol_name, ".tif"),
overwrite = TRUE)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly), probs = th, na.rm = TRUE)
if(anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
th_future <- classify_mh(mh_future, th_value)
shared <- th_present * th_future
solo_presente <- th_present - shared
solo_futura <- th_future - shared
raster_final <- shared + (solo_presente * 2) + (solo_futura * 3)
terra::writeRaster(
raster_final,
file.path(dir_output, "Shared", paste0("TH_SHARED_", model, "_", year, "_", pol_name, ".tif")),
overwrite = TRUE
)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(data = study_area, color = "gray50", fill = NA, linewidth = 1) +
ggplot2::geom_sf(data = pol, color = "black", fill = NA) +
ggplot2::scale_fill_manual(
name = "Categorías",
values = c(
"0" = "grey90",
"1" = "gold",
"2" = "aquamarine3",
"3" = "coral3"
),
labels = c(
"0" = "Non-representative",
"1" = "Stable representativeness",
"2" = "Present representativeness",
"3" = "Future representativeness"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal())
ggplot2::ggsave(
filename = file.path(dir_output, "Charts", paste0(pol_name, "_rep_shared.jpeg")),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("\nAll processes were completed")
return(invisible(NULL))
}
library(terra)
library(sf)
library(tictoc)
dir_present_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/FUTURE/GFDL/"
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
# Crear un vector con los nombres de las variables a excluir
exclude_vars <- c("bio8", "bio9", "bio18", "bio19")
#
# # Crear un patrón de expresión regular para excluir estas variables
exclude_pattern <- paste0("bio(", paste(gsub("bio", "", exclude_vars), collapse = "|"), ")")
#
# # Seleccionar las variables deseadas
present_climatic_variables <- subset(present_climatic_variables, grep(exclude_pattern, names(present_climatic_variables), invert = TRUE, value = TRUE))
future_climatic_variables <- terra::rast(list.files(dir_future_climate_data, "\\.tif$", full.names = T))
future_climatic_variables <- subset(future_climatic_variables, grep(exclude_pattern, names(future_climatic_variables), invert = TRUE, value = TRUE))
names(present_climatic_variables) <- c("CHELSA_bio1","CHELSA_bio10","CHELSA_bio11","CHELSA_bio12","CHELSA_bio13","CHELSA_bio14",
"CHELSA_bio15","CHELSA_bio16","CHELSA_bio17","CHELSA_bio2",
"CHELSA_bio3","CHELSA_bio4","CHELSA_bio5","CHELSA_bio6","CHELSA_bio7")
names(future_climatic_variables) <- names(present_climatic_variables)
# Reference system ----
terra::crs(present_climatic_variables)
reference_system <- terra::crs(present_climatic_variables)
dir_result <- "C:/A_TRABAJO/A_CLIMAREP_TEST/RESULTS/"
#study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/Peninsula_Iberica_89.shp")
study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/MURCIA.shp")
polygon <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/WDPA_spain.shp")
polygon <- filter(polygon, DESIG_ENG %in% c( "Natural Park"))
unique(polygon$DESIG_ENG)
polygon <- dplyr::filter(polygon, DESIG_ENG %in% c("Natural Park"))
library(dplyr)
study_area <- st_transform(study_area, crs(reference_system))
study_area <- st_make_valid(study_area)
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon<- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
# Crop raster to study area
present_climatic_variables <-  terra::mask (crop(present_climatic_variables, study_area), study_area)
future_climatic_variables  <-  terra::mask(crop(future_climatic_variables,  study_area), study_area)
###########################################
tic()
present_climatic_variables <- vif_filter(present_climatic_variables, th = 10)
toc()
###########################################
future_climatic_variables <- terra::subset(future_climatic_variables, names(future_climatic_variables) %in% names(present_climatic_variables))
View(polygon)
resultados <- fpa_mh_present_future(
polygon = polygon,
col_name = "ORIG_NAME",
present_climatic_variables = present_climatic_variables,
future_climatic_variables = future_climatic_variables,
study_area = study_area,
th = 0.9,
model = "GFDL",
year = "2070",
dir_output = dir_result,
save_raster = F)
resultados <- pa_mh_present_future(
polygon = polygon,
col_name = "ORIG_NAME",
present_climatic_variables = present_climatic_variables,
future_climatic_variables = future_climatic_variables,
study_area = study_area,
th = 0.9,
model = "GFDL",
year = "2070",
dir_output = dir_result,
save_raster = F)
pa_mh_present_future <- function(polygon,
col_name,
present_climatic_variables,
future_climatic_variables,
study_area,
th = 0.9,
model,
year,
dir_output = "output/",
save_raster = TRUE) {
old_warn <- getOption("warn")
options(warn = -1)
on.exit(options(warn = old_warn))
dir_present <- file.path(dir_output, "Present")
dir_future <- file.path(dir_output, "Future")
dir_shared <- file.path(dir_output, "Shared")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_present, dir_future, dir_charts, dir_shared)
if (save_raster) {
dirs_to_create <- c(dir_present, dir_future, dir_shared, dir_charts)
} else {
dirs_to_create <- c(dir_shared, dir_charts)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
reference_system_check <- terra::crs(present_climatic_variables, describe = TRUE)$code
reference_system <- terra::crs(present_climatic_variables)
if (terra::crs(future_climatic_variables, describe = TRUE)$code != reference_system_check) {
message("Adjusting CRS of future_climatic_variables to match reference system.")
future_climatic_variables <- terra::project(future_climatic_variables, reference_system)
}
if (sf::st_crs(polygon)$epsg != reference_system_check) {
message("Adjusting CRS of polygon to match reference system.")
polygon <- sf::st_transform(polygon, reference_system)
}
if (sf::st_crs(study_area)$epsg != reference_system_check) {
message("Adjusting CRS of study_area to match reference system.")
study_area <- sf::st_transform(study_area, reference_system)
}
message("Starting process")
data_p <- na.omit(terra::as.data.frame(present_climatic_variables, xy = TRUE))
data_p$Period <- "Present"
data_f <- na.omit(terra::as.data.frame(future_climatic_variables, xy = TRUE))
data_f$Period <- "Future"
data_p_f <- rbind(data_p, data_f)
cov_matrix <- cov(data_p_f[, 3:(ncol(data_p_f)-1)], use = "complete.obs")
for(j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ", pol_name, " (", j, " of ", nrow(polygon), ")")
raster_polygon <- terra::mask(terra::crop(present_climatic_variables, pol), pol)
if(all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climatic_data <- as.matrix(data[, 3:(ncol(data)-1)])
mh_values <- mahalanobis(climatic_data, mu, cov_matrix)
terra::rast(cbind(coords, mh_values), type = "xyz", crs = reference_system)
}
mh_present <- calculate_mh(data_p)
mh_future <- calculate_mh(data_f)
if(save_raster) {
terra::writeRaster(mh_present,
paste0(dir_present, "/MH_PRESENT_", pol_name, ".tif"),
overwrite = TRUE)
terra::writeRaster(mh_future,
paste0(dir_future, "/MH_FUTURE_", model, "_", year, "_", pol_name, ".tif"),
overwrite = TRUE)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly), probs = th, na.rm = TRUE)
if(anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
th_future <- classify_mh(mh_future, th_value)
shared <- th_present * th_future
solo_presente <- th_present - shared
solo_futura <- th_future - shared
raster_final <- shared + (solo_presente * 2) + (solo_futura * 3)
terra::writeRaster(
raster_final,
file.path(dir_output, "Shared", paste0("TH_SHARED_", model, "_", year, "_", pol_name, ".tif")),
overwrite = TRUE
)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(data = study_area, color = "gray50", fill = NA, linewidth = 1) +
ggplot2::geom_sf(data = pol, color = "black", fill = NA) +
ggplot2::scale_fill_manual(
name = "Categorías",
values = c(
"0" = "grey90",
"1" = "aquamarine3",
"2" = "coral3",
"3" = "gold"
),
labels = c(
"0" = "Non-representative",
"1" = "Stable representativeness",
"2" = "Present representativeness",
"3" = "Future representativeness"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal())
ggplot2::ggsave(
filename = file.path(dir_output, "Charts", paste0(pol_name, "_rep_shared.jpeg")),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("\nAll processes were completed")
return(invisible(NULL))
}
polygon <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/WDPA_spain.shp")
polygon <- dplyr::filter(polygon, DESIG_ENG %in% c("Regional Park"))
#polygon <- dplyr::filter(polygon, GIS_AREA >= 10)
study_area <- st_transform(study_area, crs(reference_system))
study_area <- st_make_valid(study_area)
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon<- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
# Crop raster to study area
present_climatic_variables <-  terra::mask (crop(present_climatic_variables, study_area), study_area)
future_climatic_variables  <-  terra::mask(crop(future_climatic_variables,  study_area), study_area)
###########################################
tic()
present_climatic_variables <- vif_filter(present_climatic_variables, th = 10)
toc()
###########################################
future_climatic_variables <- terra::subset(future_climatic_variables, names(future_climatic_variables) %in% names(present_climatic_variables))
resultados <- pa_mh_present_future(
polygon = polygon,
col_name = "ORIG_NAME",
present_climatic_variables = present_climatic_variables,
future_climatic_variables = future_climatic_variables,
study_area = study_area,
th = 0.9,
model = "GFDL",
year = "2070",
dir_output = dir_result,
save_raster = F)
resultados <- pa_mh_present_future(
polygon = polygon,
col_name = "ORIG_NAME",
present_climatic_variables = present_climatic_variables,
future_climatic_variables = future_climatic_variables,
study_area = study_area,
th = 0.9,
model = "GFDL",
year = "2070",
dir_output = dir_result,
save_raster = F)
pa_mh_present_future <- function(polygon,
col_name,
present_climatic_variables,
future_climatic_variables,
study_area,
th = 0.9,
model,
year,
dir_output = "output/",
save_raster = TRUE) {
old_warn <- getOption("warn")
options(warn = -1)
on.exit(options(warn = old_warn))
dir_present <- file.path(dir_output, "Present")
dir_future <- file.path(dir_output, "Future")
dir_shared <- file.path(dir_output, "Shared")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_present, dir_future, dir_charts, dir_shared)
if (save_raster) {
dirs_to_create <- c(dir_present, dir_future, dir_shared, dir_charts)
} else {
dirs_to_create <- c(dir_shared, dir_charts)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
reference_system_check <- terra::crs(present_climatic_variables, describe = TRUE)$code
reference_system <- terra::crs(present_climatic_variables)
if (terra::crs(future_climatic_variables, describe = TRUE)$code != reference_system_check) {
message("Adjusting CRS of future_climatic_variables to match reference system.")
future_climatic_variables <- terra::project(future_climatic_variables, reference_system)
}
if (sf::st_crs(polygon)$epsg != reference_system_check) {
message("Adjusting CRS of polygon to match reference system.")
polygon <- sf::st_transform(polygon, reference_system)
}
if (sf::st_crs(study_area)$epsg != reference_system_check) {
message("Adjusting CRS of study_area to match reference system.")
study_area <- sf::st_transform(study_area, reference_system)
}
message("Starting process")
data_p <- na.omit(terra::as.data.frame(present_climatic_variables, xy = TRUE))
data_p$Period <- "Present"
data_f <- na.omit(terra::as.data.frame(future_climatic_variables, xy = TRUE))
data_f$Period <- "Future"
data_p_f <- rbind(data_p, data_f)
cov_matrix <- cov(data_p_f[, 3:(ncol(data_p_f)-1)], use = "complete.obs")
for(j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ", pol_name, " (", j, " of ", nrow(polygon), ")")
raster_polygon <- terra::mask(terra::crop(present_climatic_variables, pol), pol)
if(all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climatic_data <- as.matrix(data[, 3:(ncol(data)-1)])
mh_values <- mahalanobis(climatic_data, mu, cov_matrix)
terra::rast(cbind(coords, mh_values), type = "xyz", crs = reference_system)
}
mh_present <- calculate_mh(data_p)
mh_future <- calculate_mh(data_f)
if(save_raster) {
terra::writeRaster(mh_present,
paste0(dir_present, "/MH_PRESENT_", pol_name, ".tif"),
overwrite = TRUE)
terra::writeRaster(mh_future,
paste0(dir_future, "/MH_FUTURE_", model, "_", year, "_", pol_name, ".tif"),
overwrite = TRUE)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly), probs = th, na.rm = TRUE)
if(anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
th_future <- classify_mh(mh_future, th_value)
shared <- th_present * th_future
solo_presente <- th_present - shared
solo_futura <- th_future - shared
raster_final <- shared + (solo_presente * 2) + (solo_futura * 3)
terra::writeRaster(
raster_final,
file.path(dir_output, "Shared", paste0("TH_SHARED_", model, "_", year, "_", pol_name, ".tif")),
overwrite = TRUE
)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(data = study_area, color = "gray50", fill = NA, linewidth = 1) +
ggplot2::geom_sf(data = pol, color = "black", fill = NA) +
ggplot2::scale_fill_manual(
name = " ",
values = c(
"0" = "grey90",
"1" = "aquamarine3",
"2" = "coral3",
"3" = "gold"
),
labels = c(
"0" = "Non-representative",
"1" = "Stable representativeness",
"2" = "Present representativeness",
"3" = "Future representativeness"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal())
ggplot2::ggsave(
filename = file.path(dir_output, "Charts", paste0(pol_name, "_rep_shared.jpeg")),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("\nAll processes were completed")
return(invisible(NULL))
}
resultados <- pa_mh_present_future(
polygon = polygon,
col_name = "ORIG_NAME",
present_climatic_variables = present_climatic_variables,
future_climatic_variables = future_climatic_variables,
study_area = study_area,
th = 0.9,
model = "GFDL",
year = "2070",
dir_output = dir_result,
save_raster = F)
