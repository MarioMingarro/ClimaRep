}
th_present <- classify_mh(mh_present, th_value)
raster_final <- th_present
terra::writeRaster(
raster_final,
file.path(dir_output, "Representativeness", paste0("TH_REP_", pol_name, ".tif")),
overwrite = TRUE
)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(data = pol, color = "black", fill = NA) +
ggplot2::scale_fill_manual(
name = " ",
values = c(
"0" = "grey90",
"1" = "aquamarine4"),
labels = c(
"0" = "Non-representative",
"1" = "Representative"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal())
ggplot2::ggsave(
filename = file.path(dir_output, "Charts", paste0(pol_name, "_rep.jpeg")),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("\nAll processes were completed")
cat(paste("\nOutput files in: ",getwd(),"/", dir_output))
return(invisible(NULL))
}
library(terra)
library(sf)
library(tictoc)
library(dplyr)
dir_present_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/FUTURE/GFDL/"
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
# Crear un vector con los nombres de las variables a excluir
exclude_vars <- c("bio8", "bio9", "bio18", "bio19")
#
# # Crear un patrón de expresión regular para excluir estas variables
exclude_pattern <- paste0("bio(", paste(gsub("bio", "", exclude_vars), collapse = "|"), ")")
#
# # Seleccionar las variables deseadas
present_climatic_variables <- subset(present_climatic_variables, grep(exclude_pattern, names(present_climatic_variables), invert = TRUE, value = TRUE))
future_climatic_variables <- terra::rast(list.files(dir_future_climate_data, "\\.tif$", full.names = T))
future_climatic_variables <- subset(future_climatic_variables, grep(exclude_pattern, names(future_climatic_variables), invert = TRUE, value = TRUE))
names(present_climatic_variables) <- c("CHELSA_bio1","CHELSA_bio10","CHELSA_bio11","CHELSA_bio12","CHELSA_bio13","CHELSA_bio14",
"CHELSA_bio15","CHELSA_bio16","CHELSA_bio17","CHELSA_bio2",
"CHELSA_bio3","CHELSA_bio4","CHELSA_bio5","CHELSA_bio6","CHELSA_bio7")
names(future_climatic_variables) <- names(present_climatic_variables)
# Reference system ----
terra::crs(present_climatic_variables)
reference_system <- terra::crs(present_climatic_variables)
##############################################################################################################################
##############################################################################################################################
dir_result <- "C:/A_TRABAJO/A_CLIMAREP_TEST/RESULTS/"
#study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/Peninsula_Iberica_89.shp")
study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/MURCIA.shp")
polygon <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/WDPA_spain.shp")
polygon <- dplyr::filter(polygon, DESIG_ENG %in% c("Regional Park"))
#polygon <- dplyr::filter(polygon, GIS_AREA >= 10)
study_area <- st_transform(study_area, crs(reference_system))
study_area <- st_make_valid(study_area)
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon<- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
# Crop raster to study area
present_climatic_variables <-  terra::mask(crop(present_climatic_variables, study_area), study_area)
future_climatic_variables  <-  terra::mask(crop(future_climatic_variables,  study_area), study_area)
###########################################
tic()
present_climatic_variables <- vif_filter(present_climatic_variables, th = 10)
toc()
###########################################
future_climatic_variables <- terra::subset(future_climatic_variables, names(future_climatic_variables) %in% names(present_climatic_variables))
tic()
mh_representativeness(
polygon = polygon,
col_name = "ORIG_NAME",
climatic_variables = present_climatic_variables,
th = 0.9, # Use a threshold, e.g., 90th percentile
dir_output = dir_result,
save_intermediate_raster = FALSE)
toc()
mh_overlay(
folder_path = dir_result,
output_filename = "kk.tif",
category_values =  c(1)
)
mh_overlay(
folder_path = paste(dir_result, "/Charts/"),
output_filename = "kk.tif",
category_values =  c(1)
)
mh_overlay(
folder_path = paste(dir_result, "Charts/"),
output_filename = "kk.tif",
category_values =  c(1)
)
mh_overlay(
folder_path = "C:/A_TRABAJO/A_CLIMAREP_TEST/RESULTS/Charts/",
output_filename = "kk.tif",
category_values =  c(1)
)
mh_overlay(
folder_path = "C:/A_TRABAJO/A_CLIMAREP_TEST/RESULTS/Representativeness/",
output_filename = "kk.tif",
category_values =  c(1)
)
# You might also filter future variables or ensure consistency after filtering present
# Consider how filtering applies to your future layers - typically based on present VIFs.
# For this example, we'll just use the filtered present set for both present/future analysis
# assuming filtering criteria derived from the present are applicable.
2. Estimate Present Environmental Representativeness
library(terra)
library(sf)
library(tictoc)
library(dplyr)
dir_present_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/FUTURE/GFDL/"
## Load data ----
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
plot(present_climatic_variables)
dir_present_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/FUTURE/GFDL/"
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
exclude_vars <- c("bio8", "bio9", "bio18", "bio19")
# # Crear un patrón de expresión regular para excluir estas variables
exclude_pattern <- paste0("bio(", paste(gsub("bio", "", exclude_vars), collapse = "|"), ")")
#
# # Seleccionar las variables deseadas
present_climatic_variables <- subset(present_climatic_variables, grep(exclude_pattern, names(present_climatic_variables), invert = TRUE, value = TRUE))
future_climatic_variables <- terra::rast(list.files(dir_future_climate_data, "\\.tif$", full.names = T))
future_climatic_variables <- subset(future_climatic_variables, grep(exclude_pattern, names(future_climatic_variables), invert = TRUE, value = TRUE))
plot(present_climatic_variables)
names(present_climatic_variables) <- c("CHELSA_bio1","CHELSA_bio10","CHELSA_bio11","CHELSA_bio12","CHELSA_bio13","CHELSA_bio14",
"CHELSA_bio15","CHELSA_bio16","CHELSA_bio17","CHELSA_bio2",
"CHELSA_bio3","CHELSA_bio4","CHELSA_bio5","CHELSA_bio6","CHELSA_bio7")
plot(present_climatic_variables)
??plot()
?plot()
library(terra)
library(sf)
library(tictoc)
library(dplyr)
dir_present_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/PRESENT/"
dir_future_climate_data <- "C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/CLIMA/FUTURE/GFDL/"
## Load data ----
present_climatic_variables <- terra::rast(list.files(dir_present_climate_data, "\\.tif$", full.names = T))
exclude_vars <- c("bio8", "bio9", "bio18", "bio19")
# # Crear un patrón de expresión regular para excluir estas variables
exclude_pattern <- paste0("bio(", paste(gsub("bio", "", exclude_vars), collapse = "|"), ")")
#
# # Seleccionar las variables deseadas
present_climatic_variables <- subset(present_climatic_variables, grep(exclude_pattern, names(present_climatic_variables), invert = TRUE, value = TRUE))
future_climatic_variables <- terra::rast(list.files(dir_future_climate_data, "\\.tif$", full.names = T))
future_climatic_variables <- subset(future_climatic_variables, grep(exclude_pattern, names(future_climatic_variables), invert = TRUE, value = TRUE))
names(present_climatic_variables) <- c("CHELSA_bio1","CHELSA_bio10","CHELSA_bio11","CHELSA_bio12","CHELSA_bio13","CHELSA_bio14",
"CHELSA_bio15","CHELSA_bio16","CHELSA_bio17","CHELSA_bio2",
"CHELSA_bio3","CHELSA_bio4","CHELSA_bio5","CHELSA_bio6","CHELSA_bio7")
names(future_climatic_variables) <- names(present_climatic_variables)
# Reference system ----
terra::crs(present_climatic_variables)
reference_system <- terra::crs(present_climatic_variables)
##############################################################################################################################
##############################################################################################################################
dir_result <- "C:/A_TRABAJO/A_CLIMAREP_TEST/RESULTS/"
#study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/Peninsula_Iberica_89.shp")
study_area <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/MURCIA.shp")
polygon <- read_sf("C:/A_TRABAJO/A_CLIMAREP_TEST/DATA/WDPA_spain.shp")
polygon <- dplyr::filter(polygon, DESIG_ENG %in% c("Regional Park"))
#polygon <- dplyr::filter(polygon, GIS_AREA >= 10)
study_area <- st_transform(study_area, crs(reference_system))
study_area <- st_make_valid(study_area)
polygon <- st_transform(polygon, crs(reference_system))
polygon <- st_make_valid(polygon)
polygon<- st_intersection(st_crop(polygon, st_bbox(study_area)), study_area)
# Crop raster to study area
present_climatic_variables <-  terra::mask(crop(present_climatic_variables, study_area), study_area)
future_climatic_variables  <-  terra::mask(crop(future_climatic_variables,  study_area), study_area)
plot(present_climatic_variables)
p <- plot(present_climatic_variables)
ggplot2::ggsave(
filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpg",
plot = p,
width = 10,
height = 8,
dpi = 300
)
p
p <- plot(present_climatic_variables)
p
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpg", width = 10, height = 8, units = "cm", res = 300)
plot(present_climatic_variables)
# Cierra el dispositivo gráfico para guardar el archivo
dev.off()
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpeg", width = 10, height = 8, units = "cm", res = 300)
plot(present_climatic_variables)
# Cierra el dispositivo gráfico para guardar el archivo
dev.off()
p <- plot(present_climatic_variables)
ggplot2::ggsave(
filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpg",
plot = p,
width = 8,
height = 10,
dpi = 300
)
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpeg", width = 10, height = 8, units = "cm", res = 300)
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpeg", width = 8, height = 10, units = "cm", res = 300)
plot(present_climatic_variables)
# Cierra el dispositivo gráfico para guardar el archivo
dev.off()
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpeg", width = 10, height = 8, units = "cm", res = 300)
plot(present_climatic_variables)
# Cierra el dispositivo gráfico para guardar el archivo
dev.off()
jpeg(filename = "C:/GITHUB/ClimaRep/FIGURES/F2.jpg", width = 10, height = 8, units = "cm", res = 300)
plot(present_climatic_variables)
# Cierra el dispositivo gráfico para guardar el archivo
dev.off()
set.seed(235)
n_cells <- 20 * 20
r_clim_present <- rast(ncols = 20, nrows = 20, nlyrs = 3)
library(terra)
library(sf)
library(dplyr)
set.seed(235)
n_cells <- 20 * 20
r_clim_present <- rast(ncols = 20, nrows = 20, nlyrs = 3)
values(r_clim_present) <- cbind(
1:n_cells * 0.1 + rnorm(n_cells, 0, 2),
1:n_cells * 0.05 + rnorm(n_cells, 0, 1),
rnorm(n_cells, 10, 3)
)
names(r_clim_present) <- c("varA", "varB", "varC")
terra::crs(r_clim_present) <- "EPSG:4326"
# --- Create simple future climatic data ---
# Example: Add an increment to present variables
r_clim_future <- r_clim_present + 2 # Simple increment
names(r_clim_future) <- names(r_clim_present)
terra::crs(r_clim_future) <- terra::crs(r_clim_present)
# --- Create simple protected area polygons ---
hex_grid <- st_sf(st_make_grid(st_as_sf(as.polygons(terra::ext(r_clim_present))), square = FALSE))
st_crs(hex_grid) <- "EPSG:4326"
protected_areas <- hex_grid[sample(nrow(hex_grid), 2), ]
protected_areas$name <- c("Area_1", "Area_2") # Column with polygon names
st_crs(protected_areas) <- st_crs(hex_grid)
# --- Create simple study area polygon ---
# Example: Use the extent of the raster
study_area_polygon <- st_as_sf(as.polygons(terra::ext(r_clim_present)))
st_crs(study_area_polygon) <- "EPSG:4326"
plot(r_clim_present)
plot(r_clim_future)
set.seed(235)
n_cells <- 20 * 20
r_clim <- rast(ncols = 20, nrows = 20, nlyrs = 3)
values(r_clim) <- cbind(
1:n_cells * 0.1 + rnorm(n_cells, 0, 2),
1:n_cells * 0.05 + rnorm(n_cells, 0, 1),
rnorm(n_cells, 10, 3)
)
names(r_clim) <- c("varA", "varB", "varC")
terra::crs(r_clim) <- "EPSG:4326"
hex_grid <- st_sf(st_make_grid(st_as_sf(as.polygons(terra::ext(r_clim))), square = FALSE))
st_crs(hex_grid) <- "EPSG:4326"
polygons <- hex_grid[sample(nrow(hex_grid), 2), ]
polygons$name <- c("Polygon_1", "Polygon_2")
st_crs(polygons) <- st_crs(hex_grid)
# --- Configuración de Datos (añadir escenario futuro) ---
r_clim_future <- r_clim + 2 # Añadir un incremento constante de 2 a cada variable
names(r_clim_future) <- names(r_clim) # Mantener los mismos nombres de variables
terra::crs(r_clim_future) <- terra::crs(r_clim) # Mantener el mismo CRS
# Crear un área de estudio (ej. la extensión del raster como un polígono)
study_area_poly <- st_as_sf(as.polygons(terra::ext(r_clim)))
st_crs(study_area_poly) <- "EPSG:4326"
# --- Definir Directorio de Salida Temporal para el Test ---
temp_dir_out_future <- file.path(tempdir(), "test_mh_present_future_output")
test_model <- "TestModel"
test_year <- 2050
# --- Ejecutar la función ---
mh_present_future(
polygon = polygons,
col_name = "name",
present_climatic_variables = r_clim,
future_climatic_variables = r_clim_future,
study_area = study_area_poly, # Usar el polígono del área de estudio
th = 0.95,
model = test_model,
year = test_year,
dir_output = temp_dir_out_future,
save_intermediate_raster = TRUE
)
#' )
#' }
#'
#' @export
#' @importFrom terra crs project crop mask global as.data.frame rast writeRaster as.factor
#' @importFrom sf st_crs st_transform st_geometry
#' @importFrom ggplot2 ggplot geom_sf scale_fill_manual ggtitle theme_minimal ggsave
#' @importFrom tidyterra geom_spatraster
#' @importFrom stats mahalanobis cov quantile
#'
mh_present_future <- function(polygon,
col_name,
present_climatic_variables,
future_climatic_variables,
study_area,
th = 0.9,
model,
year,
dir_output = "output/",
save_intermediate_raster = TRUE) {
old_warn <- getOption("warn")
options(warn = -1)
on.exit(options(warn = old_warn))
if (!inherits(polygon, "sf"))
stop("Parameter 'polygon' must be an sf object.")
if (!inherits(present_climatic_variables, "SpatRaster"))
stop("Parameter 'present_climatic_variables' must be a SpatRaster object.")
if (!inherits(future_climatic_variables, "SpatRaster"))
stop("Parameter 'future_climatic_variables' must be a SpatRaster object.")
if (!inherits(study_area, "sf"))
stop("Parameter 'study_area' must be an sf object.")
if (!is.character(col_name) || length(col_name) != 1 || !(col_name %in% names(polygon))) {
stop("Parameter 'col_name' must be a single character string naming a column in 'polygon'.")
}
if (!is.numeric(th) || length(th) != 1 || th < 0 || th > 1) {
stop("Parameter 'th' must be a single numeric value between 0 and 1.")
}
if (!is.character(model) || length(model) != 1) {
stop("Parameter 'model' must be a single character string.")
}
if (!is.character(year) || length(year) != 1) {
stop("Parameter 'year' must be a single character string.")
}
if (!is.character(dir_output) || length(dir_output) != 1) {
stop("Parameter 'dir_output' must be a single character string.")
}
if (terra::nlyr(present_climatic_variables) < 2) {
warning("climatic_variables has fewer than 2 layers. Mahalanobis distance is typically for multiple variables. Proceeding with single variable analysis if applicable.")
}
dir_present <- file.path(dir_output, "Present")
dir_future <- file.path(dir_output, "Future")
dir_shared <- file.path(dir_output, "Shared")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_present, dir_future, dir_charts, dir_shared)
if (save_intermediate_raster) {
dirs_to_create <- c(dir_present, dir_future, dir_shared, dir_charts)
} else {
dirs_to_create <- c(dir_shared, dir_charts)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
message("Validating and adjusting Coordinate Reference Systems (CRS)...")
reference_system_check <- terra::crs(present_climatic_variables, describe = TRUE)$code
reference_system <- terra::crs(present_climatic_variables)
if (terra::crs(future_climatic_variables, describe = TRUE)$code != reference_system_check) {
message("Adjusting CRS of future_climatic_variables to match reference system.")
future_climatic_variables <- terra::project(future_climatic_variables, reference_system)
}
if (sf::st_crs(polygon)$epsg != reference_system_check) {
message("Adjusting CRS of polygon to match reference system.")
polygon <- sf::st_transform(polygon, reference_system)
}
if (sf::st_crs(study_area)$epsg != reference_system_check) {
message("Adjusting CRS of study_area to match reference system.")
study_area <- sf::st_transform(study_area, reference_system)
}
message("Starting process")
data_p <- na.omit(terra::as.data.frame(present_climatic_variables, xy = TRUE))
data_p$Period <- "Present"
data_f <- na.omit(terra::as.data.frame(future_climatic_variables, xy = TRUE))
data_f$Period <- "Future"
data_p_f <- rbind(data_p, data_f)
cov_matrix <- cov(data_p_f[, 3:(ncol(data_p_f)-1)], use = "complete.obs")
for(j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ", pol_name, " (", j, " of ", nrow(polygon), ")")
raster_polygon <- terra::mask(terra::crop(present_climatic_variables, pol), pol)
if(all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climatic_data <- as.matrix(data[, 3:(ncol(data)-1)])
mh_values <- mahalanobis(climatic_data, mu, cov_matrix)
terra::rast(cbind(coords, mh_values), type = "xyz", crs = reference_system)
}
mh_present <- calculate_mh(data_p)
mh_future <- calculate_mh(data_f)
if(save_intermediate_raster) {
terra::writeRaster(mh_present,
paste0(dir_present, "/MH_PRESENT_", pol_name, ".tif"),
overwrite = TRUE)
terra::writeRaster(mh_future,
paste0(dir_future, "/MH_FUTURE_", model, "_", year, "_", pol_name, ".tif"),
overwrite = TRUE)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly), probs = th, na.rm = TRUE)
if(anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
th_future <- classify_mh(mh_future, th_value)
shared <- th_present * th_future
solo_presente <- th_present - shared
solo_futura <- th_future - shared
raster_final <- shared + (solo_presente * 2) + (solo_futura * 3)
terra::writeRaster(
raster_final,
file.path(dir_output, "Shared", paste0("TH_SHARED_", model, "_", year, "_", pol_name, ".tif")),
overwrite = TRUE
)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(data = study_area, color = "gray50", fill = NA, linewidth = 1) +
ggplot2::geom_sf(data = pol, color = "black", fill = NA) +
ggplot2::scale_fill_manual(
name = " ",
values = c(
"0" = "grey90",
"1" = "aquamarine4",
"2" = "coral1",
"3" = "aquamarine2"
),
labels = c(
"0" = "Non-representative",
"1" = "Stable representativeness",
"2" = "Loss representativeness",
"3" = "New representativeness"
),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal())
ggplot2::ggsave(
filename = file.path(dir_output, "Charts", paste0(pol_name, "_rep_shared.jpeg")),
plot = p,
width = 10,
height = 8,
dpi = 300
)
}
message("\nAll processes were completed")
cat(paste("\nOutput files in: ", dir_result))
return(invisible(NULL))
}
# --- Ejecutar la función ---
mh_present_future(
polygon = polygons,
col_name = "name",
present_climatic_variables = r_clim,
future_climatic_variables = r_clim_future,
study_area = study_area_poly, # Usar el polígono del área de estudio
th = 0.95,
model = test_model,
year = test_year,
dir_output = temp_dir_out_future,
save_intermediate_raster = TRUE
)
# --- Preparación ---
# (Los datos r_clim, r_clim_future, polygons y study_area_poly ya están definidos arriba)
# Definir parámetros adicionales requeridos por la función
test_model <- "TestModel"
test_year <- "2050"
# --- Ejecutar la función ---
mh_present_future(
polygon = polygons,
col_name = "name",
present_climatic_variables = r_clim,
future_climatic_variables = r_clim_future,
study_area = study_area_poly, # Usar el polígono del área de estudio
th = 0.95,
model = test_model,
year = test_year,
dir_output = temp_dir_out_future,
save_intermediate_raster = TRUE
)
polygons
