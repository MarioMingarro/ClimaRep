% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mh_rep.R
\name{mh_rep}
\alias{mh_rep}
\title{Multivariate Climate Representativeness Analysis}
\usage{
mh_rep(
  polygon,
  col_name,
  climate_variables,
  th = 0.95,
  dir_output = file.path(tempdir(), "ClimaRep"),
  save_raw = FALSE
)
}
\arguments{
\item{polygon}{An \code{sf} object containing the definied areas.}

\item{col_name}{\code{Character}. Name of the column in the \code{polygon} object that contains unique identifiers for each polygon.}

\item{climate_variables}{\code{SpatRaster}. A raster stack of climate variables representing the conditions of the analysis period.}

\item{th}{\code{Numeric} (0-1). Percentile threshold used to define representativeness. Cells with a Mahalanobis distance below or equal to the \code{th} are classified as representative (default: 0.95).}

\item{dir_output}{\code{Character}. Path to the directory where output files will be saved. The function will create subdirectories within this path.}

\item{save_raw}{\code{Logical.} If \code{TRUE}, saves the intermediate continuous Mahalanobis distance rasters calculated for each polygon before binary classification. The final binary classification rasters are always saved (default: FALSE).}
}
\value{
Invisibly returns NULL. Writes the following outputs to disk within subdirectories of \code{dir_output}:
\itemize{
\item Classification (\code{.tif} ) rasters: Binary rasters (\code{1} for Representative and \code{0} for Non-representative) for each input \code{polygon} are saved in the \verb{Representativeness/} subdirectory.
\item Visualization (\code{.jpeg}) maps: Image files visualizing the classification results for each \code{polygon} are saved in the \verb{Charts/} subdirectory.
\item Raw Mahalanobis distance rasters: \emph{Optionally} saved as \code{.tif} files in the \verb{Mh_Raw/} subdirectory if \code{save_raw = TRUE}.
}
}
\description{
Calculates Mahalanobis-based climate representativeness for input \code{polygons} within a defined area.
Representativeness is assessed by comparing the multivariate climate conditions of each cell to the reference climate space defined by the climate conditions within \code{study_area}.
}
\details{
This function performs a multivariate analysis using Mahalanobis distance to assess
the climate representativeness of input polygons based on climate data from a single time period.

Here are the key steps:
\enumerate{
\item Ensure all spatial inputs (\code{polygon}, \code{climate_variables}) share the same Coordinate Reference System (CRS), using the CRS of \code{climate_variables} as the reference.
\item For each polygon in the \code{polygon} object:
\itemize{
\item Crop and mask the climate variables raster (\code{climate_variables}) to the boundary of the current polygon.
\item Calculate the multivariate mean and covariance matrix using the climate data from the clipped and masked raster (handling NA values). This defines the reference climate conditions for the current polygon.
\item Calculate the Mahalanobis distance for each cell within the (\code{study_area})'s extent relative to the multivariate centroid and covariance matrix calculated for the current polygon.
\item Apply the specified threshold (\code{th}) to the calculated Mahalanobis distances to determine which cells are considered representative. This threshold is typically a percentile of the Mahalanobis distances calculated for the cells originally within the current polygon.
\item Classify each cell within the (\code{study_area})'s extent as \code{Representative = 1} (mh distance is below the threshold ) or \code{Non-Representative = 0} (mh distance is above the threshold).
}
\item Output Generation: Saves the binary classification raster (\code{.tif}) for each polygon and generates a corresponding visualization map (\code{jpeg}). These are saved within the specified output directory (\code{dir_output}).
}

It is important to note that Mahalanobis distance assumes multivariate normality and is sensitive to collinearity among variables.
While the covariance matrix accounts for correlations, it is strongly recommended that the \code{climate_variables} are not strongly correlated.
Consider performing a collinearity analysis beforehand, perhaps using the \code{vif_filter} function from this package.
}
\examples{
\dontrun{
library(terra)
library(sf)
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
  (rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
  (rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
  (colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
  (colFromCell(r_clim_present, 1:n_cells) +
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) /
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4)))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
terra::plot(r_clim_present)
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
hex_grid <- sf::st_sf(
  sf::st_make_grid(
    sf::st_as_sf(
      terra::as.polygons(
        terra::ext(r_clim_present)
      ),
    square = FALSE
  )
)
sf::st_crs(hex_grid) <- "EPSG:4326"
polygons <- hex_grid[sample(nrow(hex_grid), 2), ]
polygons$name <- c("Pol_1", "Pol_2")
sf::st_crs(polygons) <- sf::st_crs(hex_grid)
study_area_polygon <- sf::st_as_sf(as.polygons(terra::ext(r_clim_present)))
sf::st_crs(study_area_polygon) <- "EPSG:4326"
terra::plot(r_clim_present[[1]])
terra::plot(polygons, add = TRUE, color = "transparent", lwd = 3)
terra::plot(study_area_polygon, add = TRUE, col = "transparent", lwd = 3, border = "red")
mh_rep(
  polygon = polygons,
  col_name = "name",
  climate_variables = r_clim_present_filtered,
  th = 0.95,
  dir_output = file.path(tempdir(), "ClimaRep"),
  save_raw = TRUE
)
}
}
