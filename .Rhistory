study_area = study_area_polygon,
th = 0.95,
model = "ExampleModel",
year = "2070",
dir_output = output_dir,
save_raw = TRUE)
overlay_input_folder <- file.path(output_dir, "Change")
mh_overlay(
folder_path = overlay_input_folder)
overlay_output_dir <- file.path(overlay_input_folder, "overlay")
overlay_output_file <- file.path(overlay_output_dir, "climarep_overlay.tif")
expect_true(dir.exists(overlay_output_dir))
expect_true(file.exists(overlay_output_file))
expect_gt(file.size(overlay_output_file), 0)
unlink(output_dir, recursive = TRUE)
testthat::test_that("mh_overlay works correctly", {
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
(terra::rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
(terra::rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
(terra::colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
(terra::colFromCell(r_clim_present, 1:n_cells) +
(terra::rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
(terra::colFromCell(r_clim_present, 1:n_cells) /
(terra::rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
(terra::colFromCell(r_clim_present, 1:n_cells) *
(terra::rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))),
(terra::colFromCell(r_clim_present, 1:n_cells) *
(terra::colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
r_clim_present_filtered <- r_clim_present[[1:5]]
r_clim_future <- r_clim_present_filtered + 2
names(r_clim_future) <- names(r_clim_present_filtered)
hex_grid <- sf::st_sf(sf::st_make_grid(sf::st_as_sf(terra::as.polygons(
terra::ext(r_clim_present))), square = FALSE))
sf::st_crs(hex_grid) <- "EPSG:4326"
polygons <- hex_grid[sample(nrow(hex_grid), 2), ]
polygons$name <- c("Pol_1", "Pol_2")
study_area_polygon <- sf::st_as_sf(terra::as.polygons(terra::ext(r_clim_present)))
sf::st_crs(study_area_polygon) <- "EPSG:4326"
terra::plot(r_clim_present[[1]])
terra::plot(polygons,
add = TRUE,
color = "transparent",
lwd = 3)
terra::plot(
study_area_polygon,
add = TRUE,
col = "transparent",
lwd = 3,
border = "red")
output_dir <- file.path(tempdir(), "mh_overlay_test")
if (dir.exists(output_dir)) {
unlink(output_dir, recursive = TRUE)
}
dir.create(output_dir, showWarnings = FALSE)
mh_rep_ch(
polygon = polygons,
col_name = "name",
present_climate_variables = r_clim_present_filtered,
future_climate_variables = r_clim_future,
study_area = study_area_polygon,
th = 0.95,
model = "ExampleModel",
year = "2070",
dir_output = output_dir,
save_raw = TRUE)
overlay_input_folder <- file.path(output_dir, "Change")
mh_overlay(
folder_path = overlay_input_folder)
overlay_output_dir <- file.path(overlay_input_folder, "overlay")
overlay_output_file <- file.path(overlay_output_dir, "climarep_overlay.tif")
expect_true(dir.exists(overlay_output_dir))
expect_true(file.exists(overlay_output_file))
expect_gt(file.size(overlay_output_file), 0)
unlink(output_dir, recursive = TRUE)
})
test()
document()
check()
document()
test()
document()
check()
build()
library(devtools)
document()
build()
library(devtools)
document()
check()
build()
test()
remove.packages("ClimaRep")
install.packages("C:/GITHUB/ClimaRep/ClimaRep_0.2.tar.gz", repos = NULL, type = "source")
library(devtools)
test()
document()
check()
bu
build()
test()
document()
check()
build()
library(devtools)
document()
check()
build()
install.packages("C:/GITHUB/ClimaRep/ClimaRep_0.5.tar.gz", repos = NULL, type = "source")
library(ClimaRep)
library(terra)
library(sf)
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
(rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
(rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
(colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
(colFromCell(r_clim_present, 1:n_cells) +
rowFromCell(r_clim_present, 1:n_cells) * 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) /
rowFromCell(r_clim_present, 1:n_cells) * 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) *
(rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))),
(colFromCell(r_clim_present, 1:n_cells) *
(colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
terra::plot(r_clim_present)
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
terra::plot(r_clim_present_filtered)
hex_grid <- sf::st_sf(
sf::st_make_grid(
sf::st_as_sf(
terra::as.polygons(
terra::ext(r_clim_present))),
square = FALSE))
sf::st_crs(hex_grid) <- "EPSG:4326"
polygons <- hex_grid[sample(nrow(hex_grid), 2), ]
polygons$name <- c("Pol_1", "Pol_2")
sf::st_crs(polygons) <- sf::st_crs(hex_grid)
study_area_polygon <- sf::st_as_sf(as.polygons(terra::ext(r_clim_present)))
sf::st_crs(study_area_polygon) <- "EPSG:4326"
terra::plot(r_clim_present[[1]])
terra::plot(polygons, add = TRUE, color= "transparent", lwd = 3)
terra::plot(study_area_polygon, add = TRUE, col = "transparent", lwd = 3, border = "red")
mh_rep(
polygon = polygons,
col_name = "name",
climate_variables = r_clim_present_filtered,
th = 0.9, # Use a threshold, e.g., 90th percentile
dir_output = tempdir(),
save_raw = TRUE)
list.files(tempdir())
list.files(file.path(tempdir(), "Charts"))
mh_rep_raw <- terra::rast(list.files(file.path(tempdir(), "Mh_Raw"),  pattern = "\\.tif$", full.names = TRUE))
terra::plot(mh_rep_raw[[1]])
terra::plot(polygons[1,], add = TRUE, color= "transparent", lwd = 3)
mh_rep_result <- terra::rast(list.files(file.path(tempdir(), "Representativeness"),  pattern = "\\.tif$", full.names = TRUE))
terra::plot(mh_rep_result[[1]])
terra::plot(polygons[1,], add = TRUE, color= "transparent", lwd = 3)
r_clim_future <- r_clim_present_filtered + 2
names(r_clim_future) <- names(r_clim_present_filtered)
terra::crs(r_clim_future) <- terra::crs(r_clim_present_filtered)
terra::plot(r_clim_future)
mh_rep_ch(
polygon = polygons,
col_name = "name",
present_climate_variables = r_clim_present_filtered,
future_climate_variables = r_clim_future,
study_area = study_area_polygon,
th = 0.95,
model = "MODEL",
year = "2070",
dir_output = tempdir(),
save_raw = TRUE)
list.files(tempdir())
change_result <- terra::rast(list.files(file.path(tempdir(), "Change"),  pattern = "\\.tif$", full.names = TRUE))
terra::plot(change_result[[2]])
terra::plot(polygons[2,], add = TRUE, color= "transparent", lwd = 3)
list.files(file.path(tempdir(), "Charts"))
Mh_raw_Pre_result <- terra::rast(list.files(file.path(tempdir(), "Mh_Raw_Pre"),  pattern = "\\.tif$", full.names = TRUE))
terra::plot(Mh_raw_Pre_result[[2]])
terra::plot(polygons[2,], add = TRUE, color= "transparent", lwd = 3)
Mh_raw_Fut_result <- terra::rast(list.files(file.path(tempdir(), "Mh_Raw_Fut"),  pattern = "\\.tif$", full.names = TRUE))
terra::plot(Mh_raw_Fut_result[[2]])
terra::plot(polygons[2,], add = TRUE, color= "transparent", lwd = 3)
mh_overlay(
folder_path = file.path(tempdir(), "Change"))
ClimaRep_overlay <- terra::rast(list.files(file.path(tempdir(), "Change/overlay"),  pattern = "\\.tif$", full.names = TRUE))
terra::plotRGB(ClimaRep_overlay, stretch = "lin")
terra::plot(ClimaRep_overlay)
#'    (colFromCell(r_clim, 1:n_cells) *
#'      (colFromCell(r_clim, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))))
#' names(r_clim) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
#' terra::crs(r_clim) <- "EPSG:4326"
#' terra::plot(r_clim)
#'
#' r_clim_filtered <- ClimaRep::vif_filter(r_clim, th = 5)
#'
#' terra::plot(r_clim_filtered)
#' @export
vif_filter <- function(x, th = 5) {
if (!inherits(x, 'SpatRaster')) {
stop("Input 'x' must be a SpatRaster.")
}
if (!is.numeric(th)) {
stop("Parameter 'th' must be numeric.")
}
original_raster <- x
x_df <- terra::as.data.frame(x, na.rm = TRUE)
original_cor_matrix <- NULL
if (ncol(x_df) > 1) {
original_cor_matrix <- round(cor(x_df, method = "pearson"), 4)
} else {
original_cor_matrix <- "Correlation matrix not applicable (less than 2 variables)."
}
calc_vif <- function(df) {
if (ncol(df) <= 1) {
return(numeric(0))
}
variances <- apply(df, 2, var, na.rm = TRUE)
cols_zero_var <- names(variances[variances < .Machine$double.eps^0.5])
if (length(cols_zero_var) > 0) {
warning(
"Removing columns with zero or near-zero variance during VIF calculation: ",
paste(cols_zero_var, collapse = ", ")
)
df <- df[, !(colnames(df) %in% cols_zero_var), drop = FALSE]
if (ncol(df) <= 1) {
return(numeric(0))
}
}
vif_values <- sapply(1:ncol(df), function(i) {
model <- try(stats::lm(as.formula(paste(names(df)[i], "~ .")), data = df), silent = TRUE)
if (inherits(model, "try-error") ||
is.null(summary(model)$r.squared) ||
is.na(summary(model)$r.squared) ||
summary(model)$r.squared >= 1) {
return(Inf)
}
vif <- 1 / (1 - summary(model)$r.squared)
if (is.infinite(vif)) {
return(Inf)
}
return(vif)
})
names(vif_values) <- colnames(df)
return(vif_values)
}
exc <- character(0)
kept_vars <- colnames(x_df)
while (length(kept_vars) > 1) {
df_subset <- x_df[, kept_vars, drop = FALSE]
v <- calc_vif(df_subset)
if (length(v) == 0 || all(v < th)) {
break
}
max_v_val <- max(v, na.rm = TRUE)
if (is.infinite(max_v_val)) {
ex <- names(v)[which(is.infinite(v))[1]]
} else {
ex <- names(v)[which.max(v)]
}
if (ex %in% exc) {
warning("Variable ",
ex,
" with max VIF already in excluded list. Breaking loop.")
break
}
exc <- c(exc, ex)
kept_vars <- kept_vars[!(kept_vars %in% ex)]
}
final_vif_data <- NULL
kept_df_subset <- x_df[, kept_vars, drop = FALSE]
if (length(kept_vars) > 0) {
if (length(kept_vars) > 1) {
final_vif_values <- round(calc_vif(kept_df_subset), 4)
if (length(final_vif_values) > 0) {
final_vif_data <- data.frame(VIF = final_vif_values)
} else {
final_vif_data <- "Could not calculate VIFs for kept variables (e.g., perfect collinearity remaining or insufficient variables after zero-variance removal)."
}
} else {
final_vif_data <- "Only one variable kept. VIF calculation not applicable."
}
} else {
final_vif_data <- "No variables kept."
}
results_summary <- list(
kept_layers = kept_vars,
excluded_layers = exc,
original_correlation_matrix = original_cor_matrix,
final_vif_values = final_vif_data
)
if (length(kept_vars) == 0) {
warning("All variables were excluded. Returning an empty SpatRaster.")
filtered_raster <- original_raster[[character(0)]]
} else {
filtered_raster <- subset(original_raster, kept_vars)
}
message("All processes were completed")
return(list(filtered_raster = filtered_raster, summary = results_summary))
}
library(devtools)
test()
test()
rm(list = c("vif_filter"))
test()
document()
document
document()
test()
check()
document()
check()
document()
check()
document()
check()
document()
test()
test()
test()
document()
check()
build()
document()
build()
library(devtools)
document()
check()
build()
library(devtools)
test()
document()
check()
build()
library(devtools)
library(test)
test()
document()
check()
build()
mh_overlay <- function(folder_path, output_dir = file.path(tempdir(), "ClimaRep_overlay")) {
if (!is.character(folder_path) ||
length(folder_path) != 1 || !dir.exists(folder_path)) {
stop("Parameter 'folder_path' must be a character string and a valid directory.")
}
if (!is.character(output_dir) || length(output_dir) != 1) {
stop("Parameter 'output_dir' must be a single character string.")
}
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
}
dir_individual_bands <- file.path(output_dir, "Individual_Bands")
if (!dir.exists(dir_individual_bands)) {
dir.create(dir_individual_bands, recursive = TRUE, showWarnings = FALSE)
}
rgb_category_map <- c("Lost" = 2,
"Retained" = 1,
"Novel" = 3)
rgb_channel_names <- c("Lost_Count_R", "Retained_Count_G", "Novel_Count_B")
raster_files <- list.files(folder_path, pattern = "\\.tif$", full.names = TRUE)
if (length(raster_files) == 0) {
warning("No '.tif files' found in the specified folder: ",
folder_path,
". Returning NULL.")
return(invisible(NULL))
}
message(
"Processing ",
length(raster_files),
" rasters from ",
folder_path
)
first_raster <- terra::rast(raster_files[1])
count_rasters_for_rgb <- vector("list", length = length(rgb_category_map))
names(count_rasters_for_rgb) <- names(rgb_category_map)
all_binary_layers <- list()
for (cat_name in names(rgb_category_map)) {
category_value <- rgb_category_map[cat_name]
message("Calculating counts for category: ",
cat_name,
" (value = ",
category_value,
") ")
current_category_binary_layers <- list()
for (i in seq_along(raster_files)) {
file_path <- raster_files[i]
current_raster <- terra::rast(file_path)
binary_layer <- terra::ifel(current_raster == category_value, 1, 0)
current_category_binary_layers[[length(current_category_binary_layers) + 1]] <- binary_layer
}
if (length(current_category_binary_layers) > 0) {
stacked_binary_layers <- terra::rast(current_category_binary_layers)
current_category_sum_raster <- terra::app(stacked_binary_layers, fun =
"sum")
} else {
current_category_sum_raster <- first_raster * 0
}
# Save individual band to its own .tif file
band_filename <- paste0(rgb_channel_names[which(names(rgb_category_map) == cat_name)], ".tif")
terra::writeRaster(current_category_sum_raster,
file.path(dir_individual_bands, band_filename),
overwrite = TRUE,
datatype = "INT2U")
count_rasters_for_rgb[[cat_name]] <- current_category_sum_raster
}
final_rgb_stack <- c(count_rasters_for_rgb[["Lost"]],
count_rasters_for_rgb[["Retained"]],
count_rasters_for_rgb[["Novel"]])
names(final_rgb_stack) <- rgb_channel_names
dir_output_file <- file.path(output_dir, "ClimaRep_overlay.tif")
terra::writeRaster(final_rgb_stack,
dir_output_file,
overwrite = TRUE,
datatype = "INT2U")
message("All processes were completed")
message(paste("Output files saved in: ", output_dir))
return(invisible(final_rgb_stack))
}
mh_overlay(
folder_path = file.path("C:/A_TRABAJO/A_CLIMAREP_TEST/AA_PAPER/RESULTS/N2000/Change_IPSL_250", "Change"),
output_dir = "C:/A_TRABAJO/AQUI")
terra::plot(ClimaRep_overlay)
aa <- mh_overlay(
+   folder_path = file.path("C:/A_TRABAJO/A_CLIMAREP_TEST/AA_PAPER/RESULTS/N2000/Change_IPSL_250", "Change"),
aa <- mh_overlay(
folder_path = file.path("C:/A_TRABAJO/A_CLIMAREP_TEST/AA_PAPER/RESULTS/N2000/Change_IPSL_250", "Change"),
output_dir = "C:/A_TRABAJO/AQUI")
terra::plot(ClimaRep_overlay)
terra::plot(aa)
terra::plotRGB(aa)
terra::plotRGB(aa)
library(devtools)
document()
test()
test()
document()
check()
build()
library(devtools)
document
library(devtools)
document()
document()
test()
check()
document()
test()
check()
document()
test
test()
test()
document()
check()
document()
test()
library(devtools)
document()
test()
check()
build()
document()
test()
check()
document()
check()
document()
check()
build()
build()
documen
library(devtools)
document()
test()
check()
build()
library(devtools)
document()
test()
check()
build()
library(devtools)
test()
document()
check()
build()
library(devtools)
document()
document()
build()
remove.packages("ClimaRep")
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
