% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vif_filter.R
\name{vif_filter}
\alias{vif_filter}
\title{Filter SpatRaster Layers based on Variance Inflation Factor (VIF)}
\usage{
vif_filter(x, th = 10)
}
\arguments{
\item{x}{A \code{SpatRaster} object containing the layers (variables) to filter.
Must contain two or more layers.}

\item{th}{A numeric value specifying the Variance Inflation Factor (VIF)
threshold. Layers whose VIF exceeds this threshold are candidates for
removal in each iteration (default: 10).}
}
\value{
A \link{SpatRaster} object containing onlythe layers from the input
\code{x} that were retained by the VIF filtering process. The layers are returned
in their original order. If no layers meet the VIF threshold criterion
(all are excluded) or if the input becomes empty after removing NA values, an empty \code{SpatRaster} object is returned.
}
\description{
This function iteratively filters layers from a \code{SpatRaster} object by removing the one with the highest Variance Inflation Factor (VIF) that exceeds a specified threshold (\code{th}).
The process continues until all remaining layers have a VIF below the threshold or until only one layer remains.
}
\details{
The Variance Inflation Factor (VIF) quantifies the severity of
multicollinearity among predictor variables in a linear regression model. A
high VIF for a variable indicates that this variable is highly correlated
with other predictors. In the context of climate variable selection for
multivariate analyses (such as Mahalanobis distance), high VIF values suggest
redundancy of information among variables.

This function implements a common iterative procedure to reduce multicollinearity among raster layers by removing variables with high Variance Inflation Factor (VIF). Here are the key steps:
\enumerate{
\item The input \code{SpatRaster} (\code{x}) is converted to a \code{data.frame}.
\item Rows containing any \code{NA} values across all variables are removed from the \code{data.frame}.
\item The function enters an iterative loop. In each iteration, the Variance Inflation Factor (VIF) is calculated for all variables currently remaining in the dataset.
\item The variable with the highest VIF among the remaining variables is identified.
\item If this highest VIF value is greater than the specified threshold (\code{th}), tthe variable with the highest VIF is removed from the dataset, and the loop continues with the remaining variables.
\item This iterative process (steps 3-5) repeats until the highest VIF among the remaining variables is less than or equal to \code{th}, or until only one variable remains in the dataset.
}

Finally, the function returns a new \code{SpatRaster} object containing only the variables that were kept.
Also prints a summary of the filtering process including:
\itemize{
\item The original correlation matrix.
\item The lists of kept and excluded variables.
\item The final VIF values for the variables that were retained.
}

The internal VIF calculation includes checks to handle potential numerical
instability, such as columns with zero or near-zero variance and cases of
perfect collinearity, which could otherwise lead to errors (e.g., infinite
VIFs or issues with matrix inversion). Variables with infinite VIF are
prioritized for removal.
}
\examples{
library(terra)
library(sf)

set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c(
  (rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
  (rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
  (colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
  (colFromCell(r_clim_present, 1:n_cells) +
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) /
    (rowFromCell(r_clim_present, 1:n_cells)) * 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (rowFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4)),
  (colFromCell(r_clim_present, 1:n_cells) *
    (colFromCell(r_clim_present, 1:n_cells) + 0.1 + rnorm(n_cells, 0, 4))
)
names(r_clim) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim) <- "EPSG:4326"
terra::plot(r_clim)
r_clim_filtered <- vif_filter(r_clim, th = 5)
terra::plot(r_clim_filtered)

}
