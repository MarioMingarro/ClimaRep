}
if (all(sapply(binary_layers_by_category, function(x) length(x) == 0))) {
message("No valid raster data was processed from the found files.")
return(NULL)
}
message("Stacking and summing binary layers by category...")
output_layers <- list()
for (k in seq_along(category_values)) {
cat_value <- category_values[k]
list_of_layers <- binary_layers_by_category[[k]]
if (length(list_of_layers) == 0) {
warning("No binary layers were generated for category ", cat_value, ". This category may not be present in any valid raster, or there were reading errors.")
if (!is.null(first_raster_props)) {
count_layer <- terra::rast(first_raster_props)
terra::values(count_layer) <- 0
} else {
count_layer <- NULL
}
} else {
stack_cat <- terra::rast(list_of_layers)
count_layer <- terra::app(stack_cat, fun = sum, na.rm = TRUE)
}
if (!is.null(count_layer)) {
names(count_layer) <- paste0("Count_Category_", cat_value)
output_layers[[length(output_layers) + 1]] <- count_layer
}
}
if (length(output_layers) == 0) {
message("No output layers could be generated for the specified categories.")
return(NULL)
}
output_stack <- terra::rast(output_layers)
dir_output <- file.path(folder_path, output_filename)
terra::writeRaster(output_stack, dir_output, overwrite = TRUE, datatype = "INT4U")
if (add_to_environment) {
message("Assigning final raster stack to variable 'climarep_img' in the calling environment.")
assign("climarep_img", output_stack, envir = parent.frame())
}
message("All processes were completed")
cat(paste("Output files in:", dir_output))
return(invisible(output_stack))
}
mh_overlay(folder_path, output_filename = "combined_category_counts_ap.tif", category_values = c(0, 1, 2, 3), add_to_environment = TRUE)
terra::plot(climarep_img)
mh_overlay(folder_path, output_filename = "combined_category_counts_ap.tif", category_values = c( 2, 3), add_to_environment = TRUE)
terra::plot(climarep_img)
library(devtools)
document()
document()
#' mh_rep(
#' polygon = polygons,
#' col_name = "name",
#' climatic_variables = r_clim_present_filtered,
#' th = 0.95,
#' dir_output = tempdir(),
#' save_raw = TRUE)
#'
#' @export
#'
mh_rep <- function(polygon,
col_name,
climatic_variables,
th = 0.95,
dir_output = tempdir(),
save_raw = FALSE) {
old_warn <- getOption("warn")
options(warn = -1)
on.exit(options(warn = old_warn))
if (!inherits(polygon, "sf"))
stop("Parameter 'polygon' must be an sf object.")
if (!is.character(col_name) ||
length(col_name) != 1 || !(col_name %in% names(polygon))) {
stop("Parameter 'col_name' must be a single character string naming a column in 'polygon'.")
}
if (!inherits(climatic_variables, "SpatRaster"))
stop("Parameter 'climatic_variables' must be a SpatRaster object.")
if (!is.numeric(th) || length(th) != 1 || th < 0 || th > 1) {
stop("Parameter 'th' must be a single numeric value between 0 and 1.")
}
if (!is.character(dir_output) || length(dir_output) != 1) {
stop("Parameter 'dir_output' must be a single character string.")
}
if (terra::nlyr(climatic_variables) < 2) {
warning(
"climatic_variables has fewer than 2 layers. Mahalanobis distance is typically for multiple variables. Proceeding with single variable analysis if applicable."
)
}
dir_rep <- file.path(dir_output, "Representativeness")
dir_charts <- file.path(dir_output, "Charts")
dirs_to_create <- c(dir_rep, dir_charts)
if (save_raw) {
dir_mh_raw <- file.path(dir_output, "Mh_Raw")
dirs_to_create <- c(dirs_to_create, dir_mh_raw)
}
sapply(dirs_to_create, function(dir) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
})
message("Validating and adjusting Coordinate Reference Systems (CRS)...")
reference_system_check <- terra::crs(climatic_variables, describe = TRUE)$code
reference_system <- terra::crs(climatic_variables)
if (sf::st_crs(polygon)$epsg != reference_system_check) {
message("Adjusting CRS of polygon to match reference system.")
polygon <- sf::st_transform(polygon, reference_system)
}
message("Starting per-polygon processing...")
data_p <- na.omit(terra::as.data.frame(climatic_variables, xy = TRUE))
data_p$Period <- "Present"
cov_matrix <- cov(data_p[, 3:(ncol(data_p) - 1)], use = "complete.obs")
for (j in 1:nrow(polygon)) {
pol <- polygon[j, ]
pol_name <- as.character(pol[[col_name]])
pol_name <- as.character(tolower(pol_name))
pol_name <- iconv(pol_name, to = 'ASCII//TRANSLIT')
pol_name <- gsub("[^a-z0-9_]+", "_", pol_name)
pol_name <- gsub("__+", "_", pol_name)
pol_name <- gsub("^_|_$", "", pol_name)
message("\nProcessing polygon: ",
pol_name,
" (",
j,
" of ",
nrow(polygon),
")")
raster_polygon <- terra::mask(terra::crop(climatic_variables, pol), pol)
if (all(is.na(terra::values(raster_polygon)))) {
warning("No available data for: ", pol_name, ". Skipping...")
next
}
mu <- terra::global(raster_polygon, "mean", na.rm = TRUE)$mean
calculate_mh <- function(data) {
coords <- data[, 1:2]
climatic_data <- as.matrix(data[, 3:(ncol(data) - 1)])
mh_values <- mahalanobis(climatic_data, mu, cov_matrix)
terra::rast(cbind(coords, mh_values),
type = "xyz",
crs = reference_system)
}
mh_present <- calculate_mh(data_p)
if (save_raw) {
terra::writeRaster(mh_present, file.path(dir_mh_raw, paste0("MH_rep_", pol_name, ".tif")), overwrite = TRUE)
}
mh_poly <- terra::mask(mh_present, pol)
th_value <- quantile(terra::values(mh_poly),
probs = th,
na.rm = TRUE)
if (anyNA(th_value)) {
warning("No threshold was obtained for: ", pol_name, ". Skipping...")
next
}
classify_mh <- function(mh_raster, threshold) {
terra::ifel(mh_raster <= threshold, 1, 0)
}
th_present <- classify_mh(mh_present, th_value)
raster_final <- th_present
terra::writeRaster(raster_final,
file.path(
dir_output,
"Representativeness",
paste0("TH_Rep_", pol_name, ".tif")
),
overwrite = TRUE)
raster_final <- terra::as.factor(raster_final)
p <- suppressMessages(
ggplot2::ggplot() +
tidyterra::geom_spatraster(data = raster_final) +
ggplot2::geom_sf(
data = pol,
color = "black",
fill = NA
) +
ggplot2::scale_fill_manual(
name = " ",
values = c("0" = "grey90", "1" = "aquamarine4"),
labels = c("0" = "Non-representative", "1" = "Representative"),
na.value = "transparent",
na.translate = FALSE,
drop = FALSE
) +
ggplot2::ggtitle(pol_name) +
ggplot2::theme_minimal()
)
ggplot2::ggsave(
filename = file.path(
dir_output,
"Charts",
paste0(pol_name, "_rep.jpeg")
),
plot = p,
width = 10,
height = 10,
dpi = 300
)
}
message("All processes were completed")
cat(paste("Output files in:", dir_output))
return(invisible(NULL))
}
library(terra)
library(sf)
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
values(r_clim_present) <- c((rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
(rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
(colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
(colFromCell(r_clim_present, 1:n_cells) + (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) / (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (colFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
terra::plot(r_clim_present)
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
hex_grid <- sf::st_sf(
sf::st_make_grid(
sf::st_as_sf(
terra::as.polygons(
terra::ext(r_clim_present))),
square = FALSE))
sf::st_crs(hex_grid) <- "EPSG:4326"
polygons <- hex_grid[sample(nrow(hex_grid), 2), ]
polygons$name <- c("Pol_1", "Pol_2")
sf::st_crs(polygons) <- sf::st_crs(hex_grid)
study_area_polygon <- sf::st_as_sf(as.polygons(terra::ext(r_clim_present)))
sf::st_crs(study_area_polygon) <- "EPSG:4326"
terra::plot(r_clim_present[[1]])
terra::plot(polygons, add = TRUE, color= "transparent", lwd = 3)
terra::plot(study_area_polygon, add = TRUE, col = "transparent", lwd = 3, border = "red")
mh_rep(
polygon = polygons,
col_name = "name",
climatic_variables = r_clim_present_filtered,
th = 0.95,
dir_output = tempdir(),
save_raw = TRUE)
document()
document()
document()
document()
document()
document()
devtools::check()
document()
document()
devtools::check()
document()
devtools::check()
tempdir()
list.files(dir_output, recursive = TRUE)
dir_output = tempdir()
list.files(dir_output, recursive = TRUE)
document()
check()
document()
check()
document()
check()
document()
check()
file.path(tempdir(), "ClimaRep")
document()
check()
document()
check()
document()
check()
#' @title Filter SpatRaster Layers based on Variance Inflation Factor (VIF)
#'
#' @description This function iteratively filters layers from a `SpatRaster`
#' object by removing the one with the highest Variance Inflation Factor (VIF)
#' that exceeds a specified threshold (`th`). The process continues until all
#' remaining layers have a VIF below the threshold or until only one layer
#' remains. VIF calculation is performed on the raster data after converting it
#' to a `data.frame` and removing rows containing `NA` values in any column.
#'
#' @param x A `SpatRaster` object containing the layers (variables) to filter.
#'   Must contain two or more layers for VIF calculation to be possible.
#' @param th A numeric value specifying the Variance Inflation Factor (VIF)
#'   threshold. Layers whose VIF exceeds this threshold are candidates for
#'   removal in each iteration (default: 10).
#'
#' @return \item{A [SpatRaster] object}{A [SpatRaster] object containing only
#' the layers from the input `x` that were retained by the VIF filtering
#' process. The layers are returned in their original order. If no layers meet
#' the VIF threshold criterion (all are excluded) or if the input becomes empty
#' after removing NA values, an empty `SpatRaster` object is returned.}
#'
#' @details The Variance Inflation Factor (VIF) quantifies the severity of
#' multicollinearity among predictor variables in a linear regression model. A
#' high VIF for a variable indicates that this variable is highly correlated
#' with other predictors. In the context of environmental variable selection for
#' multivariate analyses (such as Mahalanobis distance), high VIF values suggest
#' redundancy of information among variables.
#'
#' This function implements a common iterative procedure to reduce
#' multicollinearity:
#' \enumerate{
#'   \item The input `SpatRaster` (`x`) is converted to a `data.frame`.
#'   \item Rows containing any `NA` values across all variables are removed from the `data.frame`. All subsequent VIF calculations are based on this cleaned dataset.
#'   \item The VIF is calculated for each variable currently in the dataset.
#'   \item If the highest VIF calculated in the current step is greater than the threshold `th`, the variable corresponding to this highest VIF is removed from the dataset.
#'   \item Steps 3 and 4 are repeated until the highest VIF among the remaining variables is less than or equal to `th`, or until only one variable remains in the dataset.
#' }
#'
#' During the process, the function prints messages to the console indicating
#' which variables are being evaluated and which, if any, are removed in each
#' iteration.
#'
#' The internal VIF calculation includes checks to handle potential numerical
#' instability, such as columns with zero or near-zero variance and cases of
#' perfect collinearity, which could otherwise lead to errors (e.g., infinite
#' VIFs or issues with matrix inversion). Variables with infinite VIF are
#' prioritized for removal.
#'
#' @importFrom terra as.data.frame subset
#' @importFrom stats cov var lm as.formula cor
#' @importFrom utils packageVersion
#'
#'
#' @examples
#' \dontrun{
#' library(terra)
#' library(sf)
#'
#' set.seed(2458)
#' n_cells <- 100 * 100
#' r_clim_present <- terra::rast(ncols = 100, nrows = 100, nlyrs = 7)
#' values(r_clim <- c((rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
#'                             (rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
#'                             (colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
#'                             (colFromCell(r_clim_present, 1:n_cells) + (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
#'                             (colFromCell(r_clim_present, 1:n_cells) / (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
#'                             (colFromCell(r_clim_present, 1:n_cells) * (rowFromCell(r_clim_present, 1:n_cells))+ 0.1 + rnorm(n_cells, 0, 4)),
#'                             (colFromCell(r_clim_present, 1:n_cells) * (colFromCell(r_clim_present, 1:n_cells))+ 0.1 + rnorm(n_cells, 0, 4)))
#' names(r_clim) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
#' terra::crs(r_clim) <- "EPSG:4326"
#' terra::plot(r_clim)
#' r_clim_filtered <- vif_filter(r_clim, th = 5)
#' terra::plot(r_clim_filtered)
#'}
#' @export
vif_filter <- function(x, th = 10) {
if (!inherits(x, 'SpatRaster')) {
stop("Input 'x' must be a SpatRaster object to return a filtered raster.")
}
original_raster <- x
x_df <- terra::as.data.frame(x, na.rm = TRUE)
if (nrow(x_df) == 0 || ncol(x_df) == 0) {
warning(
"Data frame is empty after removing NAs. Cannot perform VIF calculation. Returning an empty SpatRaster.")
return(original_raster[[character(0)]])
}
original_cor_matrix <- NULL
if (ncol(x_df) > 1) {
original_cor_matrix <- round(cor(x_df, method = "pearson"), 4)
} else {
original_cor_matrix <- "Correlation matrix not applicable (less than 2 original variables after removing NAs)."
}
calc_vif <- function(df) {
if (ncol(df) <= 1) {
return(numeric(0))
}
variances <- apply(df, 2, var, na.rm = TRUE)
cols_zero_var <- names(variances[variances < .Machine$double.eps^0.5])
if (length(cols_zero_var) > 0) {
warning(
"Removing columns with zero or near-zero variance during VIF calculation:",
paste(cols_zero_var, collapse = ", ")
)
df <- df[, !(colnames(df) %in% cols_zero_var), drop = FALSE]
if (ncol(df) <= 1) {
return(numeric(0))
}
}
vif_values <- sapply(1:ncol(df), function(i) {
model <- try(stats::lm(as.formula(paste(names(df)[i], "~ .")), data = df), silent = TRUE)
if (inherits(model, "try-error") ||
is.null(summary(model)$r.squared) ||
is.na(summary(model)$r.squared) ||
summary(model)$r.squared >= 1) {
return(Inf)
}
vif <- 1 / (1 - summary(model)$r.squared)
if (is.infinite(vif)) {
return(Inf)
}
return(vif)
})
names(vif_values) <- colnames(df)
return(vif_values)
}
exc <- character(0)
kept_vars <- colnames(x_df)
while (length(kept_vars) > 1) {
df_subset <- x_df[, kept_vars, drop = FALSE]
v <- calc_vif(df_subset)
if (length(v) == 0 || all(v < th)) {
break
}
max_v_val <- max(v, na.rm = TRUE)
if (is.infinite(max_v_val)) {
ex <- names(v)[which(is.infinite(v))[1]]
} else {
ex <- names(v)[which.max(v)]
}
if (ex %in% exc) {
warning("Variable ",
ex,
" with max VIF already in excluded list. Breaking loop.")
break
}
exc <- c(exc, ex)
kept_vars <- kept_vars[!(kept_vars %in% ex)]
}
final_vif_data <- NULL
kept_df_subset <- x_df[, kept_vars, drop = FALSE]
if (length(kept_vars) > 0) {
if (length(kept_vars) > 1) {
final_vif_values <- round(calc_vif(kept_df_subset), 4)
if (length(final_vif_values) > 0) {
final_vif_data <- data.frame(VIF = final_vif_values)
} else {
final_vif_data <- "Could not calculate VIFs for kept variables (e.g., perfect collinearity remaining or insufficient variables after zero-variance removal)."
}
} else {
final_vif_data <- "Only one variable kept. VIF calculation not applicable."
}
} else {
final_vif_data <- "No variables kept."
}
cat("--- VIF Filtering Summary ---\n")
cat("VIF filtering completed.\n")
cat("Kept layers:", paste(kept_vars, collapse = ", "), "\n")
cat("Excluded layers:", paste(exc, collapse = ", "), "\n")
cat("\nPearson correlation matrix of original data:\n")
if (is.matrix(original_cor_matrix)) {
print(original_cor_matrix)
} else {
cat(original_cor_matrix, "\n")
}
cat("\nFinal VIF values for kept variables:\n")
if (is.data.frame(final_vif_data)) {
print(final_vif_data)
} else {
cat(final_vif_data, "\n")
}
cat("----------------------------\n")
if (length(kept_vars) == 0) {
warning("All variables were excluded. Returning an empty SpatRaster.")
return(original_raster[[character(0)]])
}
result_raster <- subset(original_raster, kept_vars)
return(result_raster)
}
library(testthat)
library(terra)
library(sf)
library(tidyterra)
library(stats)
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100,
nrows = 100,
nlyrs = 7)
values(r_clim_present) <- c((rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
(rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
(colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
(colFromCell(r_clim_present, 1:n_cells) + (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) / (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (rowFromCell(r_clim_present, 1:n_cells))+ 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (colFromCell(r_clim_present, 1:n_cells))+ 0.1 + rnorm(n_cells, 0, 4)))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
set.seed(2458)
n_cells <- 100 * 100
r_clim_present <- terra::rast(ncols = 100,
nrows = 100,
nlyrs = 7)
values(r_clim_present) <- c((rowFromCell(r_clim_present, 1:n_cells) * 0.2 + rnorm(n_cells, 0, 3)),
(rowFromCell(r_clim_present, 1:n_cells) * 0.9 + rnorm(n_cells, 0, 0.2)),
(colFromCell(r_clim_present, 1:n_cells) * 0.15 + rnorm(n_cells, 0, 2.5)),
(colFromCell(r_clim_present, 1:n_cells) + (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) / (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (rowFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)),
(colFromCell(r_clim_present, 1:n_cells) * (colFromCell(r_clim_present, 1:n_cells))* 0.1 + rnorm(n_cells, 0, 4)))
names(r_clim_present) <- c("varA", "varB", "varC", "varD", "varE", "varF", "varG")
terra::crs(r_clim_present) <- "EPSG:4326"
r_clim_present_filtered <- vif_filter(r_clim_present, th = 5)
document()
document()
document()
check()
document()
document()
document()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
build()
